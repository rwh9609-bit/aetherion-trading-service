              # (Stray catch-all route removed; valid route remains in routes list below)
static_resources:
  listeners:
  - name: listener_https
    address:
      socket_address: { address: 0.0.0.0, port_value: 8443 }
    filter_chains:
    - filter_chain_match: {}
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            alpn_protocols: ["h2", "http/1.1"]
            tls_certificates:
              - certificate_chain:
                  filename: /etc/letsencrypt/live/aetherion.cloud/fullchain.pem
                private_key:
                  filename: /etc/letsencrypt/live/aetherion.cloud/privkey.pem
          require_client_certificate: false
      filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          use_remote_address: true
          xff_num_trusted_hops: 1
          server_header_transformation: APPEND_IF_ABSENT
          stream_idle_timeout: 0s  # keep streaming RPCs open
          request_timeout: 15s
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              log_format:
                text_format: "[%START_TIME%] %DOWNSTREAM_REMOTE_ADDRESS% %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_DURATION%ms %BYTES_RECEIVED% %BYTES_SENT% %UPSTREAM_HOST%\n"
          route_config:
            name: local_route
            virtual_hosts:
            - name: api_services
              domains: ["api.aetherion.cloud", "www.aetherion.cloud", "localhost", "localhost:8080"]
              cors:
                allow_origin_string_match:
                  - exact: "http://localhost:3000"
                  - exact: "https://aetherion.cloud"
                  - exact: "https://www.aetherion.cloud"
                  - exact: "http://www.aetherion.cloud"
                  - safe_regex: { google_re2: {}, regex: "^https://app\\.aetherion\\.cloud$" }
                allow_methods: GET, PUT, DELETE, POST, OPTIONS
                allow_headers: >-
                  keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-grpc-web,grpc-accept-encoding,x-user-agent,custom-header-1,x-grpc-timeout,authorization
                expose_headers: grpc-status,grpc-message
                max_age: "86400"
                allow_credentials: false
              response_headers_to_add:
              - header: { key: Strict-Transport-Security, value: "max-age=63072000; includeSubDomains; preload" }
                append_action: OVERWRITE_IF_EXISTS_OR_ADD
              - header: { key: X-Content-Type-Options, value: "nosniff" }
                append_action: OVERWRITE_IF_EXISTS_OR_ADD
              - header: { key: X-Frame-Options, value: "DENY" }
                append_action: OVERWRITE_IF_EXISTS_OR_ADD
              - header: { key: Referrer-Policy, value: "strict-origin-when-cross-origin" }
                append_action: OVERWRITE_IF_EXISTS_OR_ADD
              - header: { key: Content-Security-Policy, value: "default-src 'self'; connect-src 'self' https://api.aetherion.cloud http://localhost:8080; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; frame-ancestors 'none';" }
                append_action: OVERWRITE_IF_EXISTS_OR_ADD
              routes:
              - match: { prefix: "/trading.TradingService/" }
                route:
                  cluster: trading_service
                  timeout: 0s
                  max_stream_duration: { grpc_timeout_header_max: 0s }
              - match: { prefix: "/trading.RiskService/" }
                route:
                  cluster: risk_service
                  timeout: 0s
                  max_stream_duration: { grpc_timeout_header_max: 0s }
              - match: { prefix: "/trading.AuthService/" }
                route:
                  cluster: trading_service
                  timeout: 0s
                  max_stream_duration: { grpc_timeout_header_max: 0s }
              - match: { prefix: "/trading.BotService/" }
                route:
                  cluster: trading_service
                  timeout: 0s
                  max_stream_duration: { grpc_timeout_header_max: 0s }
              - match: { prefix: "/healthz" }
                direct_response:
                  status: 200
                  body: { inline_string: "ok" }
              # Catch-all route for frontend (React app)
              - match: { prefix: "/" }
                route:
                  cluster: frontend
            - name: root_domain_passthrough
              domains: ["aetherion.cloud"]
              routes:
              - match: { prefix: "/trading." }
                route:
                  cluster: trading_service
                  timeout: 0s
                  max_stream_duration: { grpc_timeout_header_max: 0s }
              - match: { prefix: "/healthz" }
                direct_response:
                  status: 200
                  body: { inline_string: "ok" }
          http_filters:
          - name: envoy.filters.http.cors
            typed_config: { "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors }
          - name: envoy.filters.http.grpc_web
            typed_config: { "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb }
          - name: envoy.filters.http.compressor
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.compressor.v3.Compressor
              response_direction_config:
                common_config: { enabled: { default_value: true, runtime_key: compressor.enabled } }
              compressor_library: { name: text_optimized, typed_config: { "@type": type.googleapis.com/envoy.extensions.compression.gzip.compressor.v3.Gzip } }
          - name: envoy.filters.http.router
            typed_config: { "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router }
  - name: listener_http
    address:
      socket_address: { address: 0.0.0.0, port_value: 80 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: http
          route_config:
            name: acme_route
            virtual_hosts:
            - name: acme_challenge
              domains: ["*"]
              routes:
              - match: { prefix: "/.well-known/acme-challenge/" }
                route:
                  cluster: acme_challenge
          http_filters:
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  - name: listener_http
    address:
      socket_address: { address: 0.0.0.0, port_value: 80 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: http
          route_config:
            name: acme_route
            virtual_hosts:
            - name: acme_challenge
              domains: ["*"]
              routes:
              - match: { prefix: "/.well-known/acme-challenge/" }
                route:
                  cluster: acme_challenge
          http_filters:
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters:
  - name: trading_service
    connect_timeout: 0.5s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: trading_service
      endpoints:
      - lb_endpoints:
        - endpoint: { address: { socket_address: { address: trading, port_value: 50051 } } }
    health_checks:
    - timeout: 1s
      interval: 10s
      unhealthy_threshold: 2
      healthy_threshold: 2
      grpc_health_check: { service_name: "" }
  - name: risk_service
    connect_timeout: 0.5s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: risk_service
      endpoints:
      - lb_endpoints:
        - endpoint: { address: { socket_address: { address: risk, port_value: 50052 } } }
    health_checks:
    - timeout: 1s
      interval: 10s
      unhealthy_threshold: 2
      healthy_threshold: 2
      grpc_health_check: { service_name: "" }
  - name: frontend
    connect_timeout: 0.5s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: frontend
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: frontend
                port_value: 80
  - name: acme_challenge
    connect_timeout: 0.5s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: acme_challenge
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: acme-challenge
                port_value: 8080

admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }
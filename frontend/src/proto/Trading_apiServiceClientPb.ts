/**
 * @fileoverview gRPC-Web generated client stub for trading
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: trading_api.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as trading_api_pb from './trading_api_pb'; // proto import: "trading_api.proto"


export class TradingServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorStreamOrderBook = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/StreamOrderBook',
    grpcWeb.MethodType.SERVER_STREAMING,
    trading_api_pb.OrderBookRequest,
    trading_api_pb.OrderBook,
    (request: trading_api_pb.OrderBookRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.OrderBook.deserializeBinary
  );

  streamOrderBook(
    request: trading_api_pb.OrderBookRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<trading_api_pb.OrderBook> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/trading.TradingService/StreamOrderBook',
      request,
      metadata || {},
      this.methodDescriptorStreamOrderBook);
  }

  methodDescriptorGetPrice = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/GetPrice',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.Tick,
    trading_api_pb.Tick,
    (request: trading_api_pb.Tick) => {
      return request.serializeBinary();
    },
    trading_api_pb.Tick.deserializeBinary
  );

  getPrice(
    request: trading_api_pb.Tick,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.Tick>;

  getPrice(
    request: trading_api_pb.Tick,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.Tick) => void): grpcWeb.ClientReadableStream<trading_api_pb.Tick>;

  getPrice(
    request: trading_api_pb.Tick,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.Tick) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.TradingService/GetPrice',
        request,
        metadata || {},
        this.methodDescriptorGetPrice,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.TradingService/GetPrice',
    request,
    metadata || {},
    this.methodDescriptorGetPrice);
  }

  methodDescriptorStartStrategy = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/StartStrategy',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.StrategyRequest,
    trading_api_pb.StatusResponse,
    (request: trading_api_pb.StrategyRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.StatusResponse.deserializeBinary
  );

  startStrategy(
    request: trading_api_pb.StrategyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.StatusResponse>;

  startStrategy(
    request: trading_api_pb.StrategyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.StatusResponse>;

  startStrategy(
    request: trading_api_pb.StrategyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.TradingService/StartStrategy',
        request,
        metadata || {},
        this.methodDescriptorStartStrategy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.TradingService/StartStrategy',
    request,
    metadata || {},
    this.methodDescriptorStartStrategy);
  }

  methodDescriptorStopStrategy = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/StopStrategy',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.StrategyRequest,
    trading_api_pb.StatusResponse,
    (request: trading_api_pb.StrategyRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.StatusResponse.deserializeBinary
  );

  stopStrategy(
    request: trading_api_pb.StrategyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.StatusResponse>;

  stopStrategy(
    request: trading_api_pb.StrategyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.StatusResponse>;

  stopStrategy(
    request: trading_api_pb.StrategyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.TradingService/StopStrategy',
        request,
        metadata || {},
        this.methodDescriptorStopStrategy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.TradingService/StopStrategy',
    request,
    metadata || {},
    this.methodDescriptorStopStrategy);
  }

  methodDescriptorGetPortfolio = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/GetPortfolio',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.PortfolioRequest,
    trading_api_pb.Portfolio,
    (request: trading_api_pb.PortfolioRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.Portfolio.deserializeBinary
  );

  getPortfolio(
    request: trading_api_pb.PortfolioRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.Portfolio>;

  getPortfolio(
    request: trading_api_pb.PortfolioRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.Portfolio) => void): grpcWeb.ClientReadableStream<trading_api_pb.Portfolio>;

  getPortfolio(
    request: trading_api_pb.PortfolioRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.Portfolio) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.TradingService/GetPortfolio',
        request,
        metadata || {},
        this.methodDescriptorGetPortfolio,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.TradingService/GetPortfolio',
    request,
    metadata || {},
    this.methodDescriptorGetPortfolio);
  }

  methodDescriptorSubscribeTicks = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/SubscribeTicks',
    grpcWeb.MethodType.SERVER_STREAMING,
    trading_api_pb.StrategyRequest,
    trading_api_pb.Tick,
    (request: trading_api_pb.StrategyRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.Tick.deserializeBinary
  );

  subscribeTicks(
    request: trading_api_pb.StrategyRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<trading_api_pb.Tick> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/trading.TradingService/SubscribeTicks',
      request,
      metadata || {},
      this.methodDescriptorSubscribeTicks);
  }

  methodDescriptorStreamPrice = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/StreamPrice',
    grpcWeb.MethodType.SERVER_STREAMING,
    trading_api_pb.TickStreamRequest,
    trading_api_pb.Tick,
    (request: trading_api_pb.TickStreamRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.Tick.deserializeBinary
  );

  streamPrice(
    request: trading_api_pb.TickStreamRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<trading_api_pb.Tick> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/trading.TradingService/StreamPrice',
      request,
      metadata || {},
      this.methodDescriptorStreamPrice);
  }

  methodDescriptorAddSymbol = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/AddSymbol',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.SymbolRequest,
    trading_api_pb.StatusResponse,
    (request: trading_api_pb.SymbolRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.StatusResponse.deserializeBinary
  );

  addSymbol(
    request: trading_api_pb.SymbolRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.StatusResponse>;

  addSymbol(
    request: trading_api_pb.SymbolRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.StatusResponse>;

  addSymbol(
    request: trading_api_pb.SymbolRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.TradingService/AddSymbol',
        request,
        metadata || {},
        this.methodDescriptorAddSymbol,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.TradingService/AddSymbol',
    request,
    metadata || {},
    this.methodDescriptorAddSymbol);
  }

  methodDescriptorRemoveSymbol = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/RemoveSymbol',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.SymbolRequest,
    trading_api_pb.StatusResponse,
    (request: trading_api_pb.SymbolRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.StatusResponse.deserializeBinary
  );

  removeSymbol(
    request: trading_api_pb.SymbolRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.StatusResponse>;

  removeSymbol(
    request: trading_api_pb.SymbolRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.StatusResponse>;

  removeSymbol(
    request: trading_api_pb.SymbolRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.TradingService/RemoveSymbol',
        request,
        metadata || {},
        this.methodDescriptorRemoveSymbol,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.TradingService/RemoveSymbol',
    request,
    metadata || {},
    this.methodDescriptorRemoveSymbol);
  }

  methodDescriptorListSymbols = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/ListSymbols',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.Empty,
    trading_api_pb.SymbolList,
    (request: trading_api_pb.Empty) => {
      return request.serializeBinary();
    },
    trading_api_pb.SymbolList.deserializeBinary
  );

  listSymbols(
    request: trading_api_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.SymbolList>;

  listSymbols(
    request: trading_api_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.SymbolList) => void): grpcWeb.ClientReadableStream<trading_api_pb.SymbolList>;

  listSymbols(
    request: trading_api_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.SymbolList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.TradingService/ListSymbols',
        request,
        metadata || {},
        this.methodDescriptorListSymbols,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.TradingService/ListSymbols',
    request,
    metadata || {},
    this.methodDescriptorListSymbols);
  }

  methodDescriptorGetMomentum = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/GetMomentum',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.MomentumRequest,
    trading_api_pb.MomentumResponse,
    (request: trading_api_pb.MomentumRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.MomentumResponse.deserializeBinary
  );

  getMomentum(
    request: trading_api_pb.MomentumRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.MomentumResponse>;

  getMomentum(
    request: trading_api_pb.MomentumRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.MomentumResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.MomentumResponse>;

  getMomentum(
    request: trading_api_pb.MomentumRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.MomentumResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.TradingService/GetMomentum',
        request,
        metadata || {},
        this.methodDescriptorGetMomentum,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.TradingService/GetMomentum',
    request,
    metadata || {},
    this.methodDescriptorGetMomentum);
  }

  methodDescriptorExecuteTrade = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/ExecuteTrade',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.TradeRequest,
    trading_api_pb.TradeResponse,
    (request: trading_api_pb.TradeRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.TradeResponse.deserializeBinary
  );

  executeTrade(
    request: trading_api_pb.TradeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.TradeResponse>;

  executeTrade(
    request: trading_api_pb.TradeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.TradeResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.TradeResponse>;

  executeTrade(
    request: trading_api_pb.TradeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.TradeResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.TradingService/ExecuteTrade',
        request,
        metadata || {},
        this.methodDescriptorExecuteTrade,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.TradingService/ExecuteTrade',
    request,
    metadata || {},
    this.methodDescriptorExecuteTrade);
  }

  methodDescriptorGetTradeHistory = new grpcWeb.MethodDescriptor(
    '/trading.TradingService/GetTradeHistory',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.TradeHistoryRequest,
    trading_api_pb.TradeHistoryResponse,
    (request: trading_api_pb.TradeHistoryRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.TradeHistoryResponse.deserializeBinary
  );

  getTradeHistory(
    request: trading_api_pb.TradeHistoryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.TradeHistoryResponse>;

  getTradeHistory(
    request: trading_api_pb.TradeHistoryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.TradeHistoryResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.TradeHistoryResponse>;

  getTradeHistory(
    request: trading_api_pb.TradeHistoryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.TradeHistoryResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.TradingService/GetTradeHistory',
        request,
        metadata || {},
        this.methodDescriptorGetTradeHistory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.TradingService/GetTradeHistory',
    request,
    metadata || {},
    this.methodDescriptorGetTradeHistory);
  }

}

export class RiskServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCalculateVaR = new grpcWeb.MethodDescriptor(
    '/trading.RiskService/CalculateVaR',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.VaRRequest,
    trading_api_pb.VaRResponse,
    (request: trading_api_pb.VaRRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.VaRResponse.deserializeBinary
  );

  calculateVaR(
    request: trading_api_pb.VaRRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.VaRResponse>;

  calculateVaR(
    request: trading_api_pb.VaRRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.VaRResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.VaRResponse>;

  calculateVaR(
    request: trading_api_pb.VaRRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.VaRResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.RiskService/CalculateVaR',
        request,
        metadata || {},
        this.methodDescriptorCalculateVaR,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.RiskService/CalculateVaR',
    request,
    metadata || {},
    this.methodDescriptorCalculateVaR);
  }

}

export class AuthServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRegister = new grpcWeb.MethodDescriptor(
    '/trading.AuthService/Register',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.RegisterRequest,
    trading_api_pb.AuthResponse,
    (request: trading_api_pb.RegisterRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.AuthResponse.deserializeBinary
  );

  register(
    request: trading_api_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.AuthResponse>;

  register(
    request: trading_api_pb.RegisterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.AuthResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.AuthResponse>;

  register(
    request: trading_api_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.AuthResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.AuthService/Register',
        request,
        metadata || {},
        this.methodDescriptorRegister,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.AuthService/Register',
    request,
    metadata || {},
    this.methodDescriptorRegister);
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/trading.AuthService/Login',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.AuthRequest,
    trading_api_pb.AuthResponse,
    (request: trading_api_pb.AuthRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.AuthResponse.deserializeBinary
  );

  login(
    request: trading_api_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.AuthResponse>;

  login(
    request: trading_api_pb.AuthRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.AuthResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.AuthResponse>;

  login(
    request: trading_api_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.AuthResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.AuthService/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.AuthService/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

}

export class BotServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateBot = new grpcWeb.MethodDescriptor(
    '/trading.BotService/CreateBot',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.CreateBotRequest,
    trading_api_pb.StatusResponse,
    (request: trading_api_pb.CreateBotRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.StatusResponse.deserializeBinary
  );

  createBot(
    request: trading_api_pb.CreateBotRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.StatusResponse>;

  createBot(
    request: trading_api_pb.CreateBotRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.StatusResponse>;

  createBot(
    request: trading_api_pb.CreateBotRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.BotService/CreateBot',
        request,
        metadata || {},
        this.methodDescriptorCreateBot,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.BotService/CreateBot',
    request,
    metadata || {},
    this.methodDescriptorCreateBot);
  }

  methodDescriptorListBots = new grpcWeb.MethodDescriptor(
    '/trading.BotService/ListBots',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.Empty,
    trading_api_pb.BotList,
    (request: trading_api_pb.Empty) => {
      return request.serializeBinary();
    },
    trading_api_pb.BotList.deserializeBinary
  );

  listBots(
    request: trading_api_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.BotList>;

  listBots(
    request: trading_api_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.BotList) => void): grpcWeb.ClientReadableStream<trading_api_pb.BotList>;

  listBots(
    request: trading_api_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.BotList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.BotService/ListBots',
        request,
        metadata || {},
        this.methodDescriptorListBots,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.BotService/ListBots',
    request,
    metadata || {},
    this.methodDescriptorListBots);
  }

  methodDescriptorStartBot = new grpcWeb.MethodDescriptor(
    '/trading.BotService/StartBot',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.BotIdRequest,
    trading_api_pb.StatusResponse,
    (request: trading_api_pb.BotIdRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.StatusResponse.deserializeBinary
  );

  startBot(
    request: trading_api_pb.BotIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.StatusResponse>;

  startBot(
    request: trading_api_pb.BotIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.StatusResponse>;

  startBot(
    request: trading_api_pb.BotIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.BotService/StartBot',
        request,
        metadata || {},
        this.methodDescriptorStartBot,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.BotService/StartBot',
    request,
    metadata || {},
    this.methodDescriptorStartBot);
  }

  methodDescriptorStopBot = new grpcWeb.MethodDescriptor(
    '/trading.BotService/StopBot',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.BotIdRequest,
    trading_api_pb.StatusResponse,
    (request: trading_api_pb.BotIdRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.StatusResponse.deserializeBinary
  );

  stopBot(
    request: trading_api_pb.BotIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.StatusResponse>;

  stopBot(
    request: trading_api_pb.BotIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void): grpcWeb.ClientReadableStream<trading_api_pb.StatusResponse>;

  stopBot(
    request: trading_api_pb.BotIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.StatusResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.BotService/StopBot',
        request,
        metadata || {},
        this.methodDescriptorStopBot,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.BotService/StopBot',
    request,
    metadata || {},
    this.methodDescriptorStopBot);
  }

  methodDescriptorGetBotStatus = new grpcWeb.MethodDescriptor(
    '/trading.BotService/GetBotStatus',
    grpcWeb.MethodType.UNARY,
    trading_api_pb.BotIdRequest,
    trading_api_pb.BotConfig,
    (request: trading_api_pb.BotIdRequest) => {
      return request.serializeBinary();
    },
    trading_api_pb.BotConfig.deserializeBinary
  );

  getBotStatus(
    request: trading_api_pb.BotIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<trading_api_pb.BotConfig>;

  getBotStatus(
    request: trading_api_pb.BotIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: trading_api_pb.BotConfig) => void): grpcWeb.ClientReadableStream<trading_api_pb.BotConfig>;

  getBotStatus(
    request: trading_api_pb.BotIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: trading_api_pb.BotConfig) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/trading.BotService/GetBotStatus',
        request,
        metadata || {},
        this.methodDescriptorGetBotStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/trading.BotService/GetBotStatus',
    request,
    metadata || {},
    this.methodDescriptorGetBotStatus);
  }

}


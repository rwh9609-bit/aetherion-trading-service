/**
 * @fileoverview gRPC-Web generated client stub for trading
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: trading_api.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.trading = require('./trading_api_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.trading.TradingServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.trading.TradingServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.OrderBookRequest,
 *   !proto.trading.OrderBook>}
 */
const methodDescriptor_TradingService_StreamOrderBook = new grpc.web.MethodDescriptor(
  '/trading.TradingService/StreamOrderBook',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.trading.OrderBookRequest,
  proto.trading.OrderBook,
  /**
   * @param {!proto.trading.OrderBookRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.OrderBook.deserializeBinary
);


/**
 * @param {!proto.trading.OrderBookRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.trading.OrderBook>}
 *     The XHR Node Readable Stream
 */
proto.trading.TradingServiceClient.prototype.streamOrderBook =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/trading.TradingService/StreamOrderBook',
      request,
      metadata || {},
      methodDescriptor_TradingService_StreamOrderBook);
};


/**
 * @param {!proto.trading.OrderBookRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.trading.OrderBook>}
 *     The XHR Node Readable Stream
 */
proto.trading.TradingServicePromiseClient.prototype.streamOrderBook =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/trading.TradingService/StreamOrderBook',
      request,
      metadata || {},
      methodDescriptor_TradingService_StreamOrderBook);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.Tick,
 *   !proto.trading.Tick>}
 */
const methodDescriptor_TradingService_GetPrice = new grpc.web.MethodDescriptor(
  '/trading.TradingService/GetPrice',
  grpc.web.MethodType.UNARY,
  proto.trading.Tick,
  proto.trading.Tick,
  /**
   * @param {!proto.trading.Tick} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.Tick.deserializeBinary
);


/**
 * @param {!proto.trading.Tick} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.Tick)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.Tick>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.TradingServiceClient.prototype.getPrice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.TradingService/GetPrice',
      request,
      metadata || {},
      methodDescriptor_TradingService_GetPrice,
      callback);
};


/**
 * @param {!proto.trading.Tick} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.Tick>}
 *     Promise that resolves to the response
 */
proto.trading.TradingServicePromiseClient.prototype.getPrice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.TradingService/GetPrice',
      request,
      metadata || {},
      methodDescriptor_TradingService_GetPrice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.StrategyRequest,
 *   !proto.trading.StatusResponse>}
 */
const methodDescriptor_TradingService_StartStrategy = new grpc.web.MethodDescriptor(
  '/trading.TradingService/StartStrategy',
  grpc.web.MethodType.UNARY,
  proto.trading.StrategyRequest,
  proto.trading.StatusResponse,
  /**
   * @param {!proto.trading.StrategyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.StatusResponse.deserializeBinary
);


/**
 * @param {!proto.trading.StrategyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.StatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.StatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.TradingServiceClient.prototype.startStrategy =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.TradingService/StartStrategy',
      request,
      metadata || {},
      methodDescriptor_TradingService_StartStrategy,
      callback);
};


/**
 * @param {!proto.trading.StrategyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.StatusResponse>}
 *     Promise that resolves to the response
 */
proto.trading.TradingServicePromiseClient.prototype.startStrategy =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.TradingService/StartStrategy',
      request,
      metadata || {},
      methodDescriptor_TradingService_StartStrategy);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.StrategyRequest,
 *   !proto.trading.StatusResponse>}
 */
const methodDescriptor_TradingService_StopStrategy = new grpc.web.MethodDescriptor(
  '/trading.TradingService/StopStrategy',
  grpc.web.MethodType.UNARY,
  proto.trading.StrategyRequest,
  proto.trading.StatusResponse,
  /**
   * @param {!proto.trading.StrategyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.StatusResponse.deserializeBinary
);


/**
 * @param {!proto.trading.StrategyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.StatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.StatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.TradingServiceClient.prototype.stopStrategy =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.TradingService/StopStrategy',
      request,
      metadata || {},
      methodDescriptor_TradingService_StopStrategy,
      callback);
};


/**
 * @param {!proto.trading.StrategyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.StatusResponse>}
 *     Promise that resolves to the response
 */
proto.trading.TradingServicePromiseClient.prototype.stopStrategy =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.TradingService/StopStrategy',
      request,
      metadata || {},
      methodDescriptor_TradingService_StopStrategy);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.PortfolioRequest,
 *   !proto.trading.Portfolio>}
 */
const methodDescriptor_TradingService_GetPortfolio = new grpc.web.MethodDescriptor(
  '/trading.TradingService/GetPortfolio',
  grpc.web.MethodType.UNARY,
  proto.trading.PortfolioRequest,
  proto.trading.Portfolio,
  /**
   * @param {!proto.trading.PortfolioRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.Portfolio.deserializeBinary
);


/**
 * @param {!proto.trading.PortfolioRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.Portfolio)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.Portfolio>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.TradingServiceClient.prototype.getPortfolio =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.TradingService/GetPortfolio',
      request,
      metadata || {},
      methodDescriptor_TradingService_GetPortfolio,
      callback);
};


/**
 * @param {!proto.trading.PortfolioRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.Portfolio>}
 *     Promise that resolves to the response
 */
proto.trading.TradingServicePromiseClient.prototype.getPortfolio =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.TradingService/GetPortfolio',
      request,
      metadata || {},
      methodDescriptor_TradingService_GetPortfolio);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.StrategyRequest,
 *   !proto.trading.Tick>}
 */
const methodDescriptor_TradingService_SubscribeTicks = new grpc.web.MethodDescriptor(
  '/trading.TradingService/SubscribeTicks',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.trading.StrategyRequest,
  proto.trading.Tick,
  /**
   * @param {!proto.trading.StrategyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.Tick.deserializeBinary
);


/**
 * @param {!proto.trading.StrategyRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.trading.Tick>}
 *     The XHR Node Readable Stream
 */
proto.trading.TradingServiceClient.prototype.subscribeTicks =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/trading.TradingService/SubscribeTicks',
      request,
      metadata || {},
      methodDescriptor_TradingService_SubscribeTicks);
};


/**
 * @param {!proto.trading.StrategyRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.trading.Tick>}
 *     The XHR Node Readable Stream
 */
proto.trading.TradingServicePromiseClient.prototype.subscribeTicks =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/trading.TradingService/SubscribeTicks',
      request,
      metadata || {},
      methodDescriptor_TradingService_SubscribeTicks);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.TickStreamRequest,
 *   !proto.trading.Tick>}
 */
const methodDescriptor_TradingService_StreamPrice = new grpc.web.MethodDescriptor(
  '/trading.TradingService/StreamPrice',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.trading.TickStreamRequest,
  proto.trading.Tick,
  /**
   * @param {!proto.trading.TickStreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.Tick.deserializeBinary
);


/**
 * @param {!proto.trading.TickStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.trading.Tick>}
 *     The XHR Node Readable Stream
 */
proto.trading.TradingServiceClient.prototype.streamPrice =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/trading.TradingService/StreamPrice',
      request,
      metadata || {},
      methodDescriptor_TradingService_StreamPrice);
};


/**
 * @param {!proto.trading.TickStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.trading.Tick>}
 *     The XHR Node Readable Stream
 */
proto.trading.TradingServicePromiseClient.prototype.streamPrice =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/trading.TradingService/StreamPrice',
      request,
      metadata || {},
      methodDescriptor_TradingService_StreamPrice);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.trading.RiskServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.trading.RiskServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.VaRRequest,
 *   !proto.trading.VaRResponse>}
 */
const methodDescriptor_RiskService_CalculateVaR = new grpc.web.MethodDescriptor(
  '/trading.RiskService/CalculateVaR',
  grpc.web.MethodType.UNARY,
  proto.trading.VaRRequest,
  proto.trading.VaRResponse,
  /**
   * @param {!proto.trading.VaRRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.VaRResponse.deserializeBinary
);


/**
 * @param {!proto.trading.VaRRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.VaRResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.VaRResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.RiskServiceClient.prototype.calculateVaR =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.RiskService/CalculateVaR',
      request,
      metadata || {},
      methodDescriptor_RiskService_CalculateVaR,
      callback);
};


/**
 * @param {!proto.trading.VaRRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.VaRResponse>}
 *     Promise that resolves to the response
 */
proto.trading.RiskServicePromiseClient.prototype.calculateVaR =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.RiskService/CalculateVaR',
      request,
      metadata || {},
      methodDescriptor_RiskService_CalculateVaR);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.trading.AuthServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.trading.AuthServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.RegisterRequest,
 *   !proto.trading.AuthResponse>}
 */
const methodDescriptor_AuthService_Register = new grpc.web.MethodDescriptor(
  '/trading.AuthService/Register',
  grpc.web.MethodType.UNARY,
  proto.trading.RegisterRequest,
  proto.trading.AuthResponse,
  /**
   * @param {!proto.trading.RegisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.AuthResponse.deserializeBinary
);


/**
 * @param {!proto.trading.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.AuthResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.AuthResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.AuthServiceClient.prototype.register =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.AuthService/Register',
      request,
      metadata || {},
      methodDescriptor_AuthService_Register,
      callback);
};


/**
 * @param {!proto.trading.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.AuthResponse>}
 *     Promise that resolves to the response
 */
proto.trading.AuthServicePromiseClient.prototype.register =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.AuthService/Register',
      request,
      metadata || {},
      methodDescriptor_AuthService_Register);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.AuthRequest,
 *   !proto.trading.AuthResponse>}
 */
const methodDescriptor_AuthService_Login = new grpc.web.MethodDescriptor(
  '/trading.AuthService/Login',
  grpc.web.MethodType.UNARY,
  proto.trading.AuthRequest,
  proto.trading.AuthResponse,
  /**
   * @param {!proto.trading.AuthRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.AuthResponse.deserializeBinary
);


/**
 * @param {!proto.trading.AuthRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.AuthResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.AuthResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.AuthServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.AuthService/Login',
      request,
      metadata || {},
      methodDescriptor_AuthService_Login,
      callback);
};


/**
 * @param {!proto.trading.AuthRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.AuthResponse>}
 *     Promise that resolves to the response
 */
proto.trading.AuthServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.AuthService/Login',
      request,
      metadata || {},
      methodDescriptor_AuthService_Login);
};


module.exports = proto.trading;


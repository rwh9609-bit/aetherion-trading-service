/**
 * @fileoverview gRPC-Web generated client stub for trading
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: bot.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var trading_api_pb = require('./trading_api_pb.js')
const proto = {};
proto.trading = require('./bot_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.trading.BotServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.trading.BotServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.CreateBotRequest,
 *   !proto.trading.StatusResponse>}
 */
const methodDescriptor_BotService_CreateBot = new grpc.web.MethodDescriptor(
  '/trading.BotService/CreateBot',
  grpc.web.MethodType.UNARY,
  proto.trading.CreateBotRequest,
  trading_api_pb.StatusResponse,
  /**
   * @param {!proto.trading.CreateBotRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  trading_api_pb.StatusResponse.deserializeBinary
);


/**
 * @param {!proto.trading.CreateBotRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.StatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.StatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.BotServiceClient.prototype.createBot =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.BotService/CreateBot',
      request,
      metadata || {},
      methodDescriptor_BotService_CreateBot,
      callback);
};


/**
 * @param {!proto.trading.CreateBotRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.StatusResponse>}
 *     Promise that resolves to the response
 */
proto.trading.BotServicePromiseClient.prototype.createBot =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.BotService/CreateBot',
      request,
      metadata || {},
      methodDescriptor_BotService_CreateBot);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.Empty,
 *   !proto.trading.BotList>}
 */
const methodDescriptor_BotService_ListBots = new grpc.web.MethodDescriptor(
  '/trading.BotService/ListBots',
  grpc.web.MethodType.UNARY,
  trading_api_pb.Empty,
  proto.trading.BotList,
  /**
   * @param {!proto.trading.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.BotList.deserializeBinary
);


/**
 * @param {!proto.trading.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.BotList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.BotList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.BotServiceClient.prototype.listBots =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.BotService/ListBots',
      request,
      metadata || {},
      methodDescriptor_BotService_ListBots,
      callback);
};


/**
 * @param {!proto.trading.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.BotList>}
 *     Promise that resolves to the response
 */
proto.trading.BotServicePromiseClient.prototype.listBots =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.BotService/ListBots',
      request,
      metadata || {},
      methodDescriptor_BotService_ListBots);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.BotIdRequest,
 *   !proto.trading.StatusResponse>}
 */
const methodDescriptor_BotService_StartBot = new grpc.web.MethodDescriptor(
  '/trading.BotService/StartBot',
  grpc.web.MethodType.UNARY,
  proto.trading.BotIdRequest,
  trading_api_pb.StatusResponse,
  /**
   * @param {!proto.trading.BotIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  trading_api_pb.StatusResponse.deserializeBinary
);


/**
 * @param {!proto.trading.BotIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.StatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.StatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.BotServiceClient.prototype.startBot =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.BotService/StartBot',
      request,
      metadata || {},
      methodDescriptor_BotService_StartBot,
      callback);
};


/**
 * @param {!proto.trading.BotIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.StatusResponse>}
 *     Promise that resolves to the response
 */
proto.trading.BotServicePromiseClient.prototype.startBot =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.BotService/StartBot',
      request,
      metadata || {},
      methodDescriptor_BotService_StartBot);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.BotIdRequest,
 *   !proto.trading.StatusResponse>}
 */
const methodDescriptor_BotService_StopBot = new grpc.web.MethodDescriptor(
  '/trading.BotService/StopBot',
  grpc.web.MethodType.UNARY,
  proto.trading.BotIdRequest,
  trading_api_pb.StatusResponse,
  /**
   * @param {!proto.trading.BotIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  trading_api_pb.StatusResponse.deserializeBinary
);


/**
 * @param {!proto.trading.BotIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.StatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.StatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.BotServiceClient.prototype.stopBot =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.BotService/StopBot',
      request,
      metadata || {},
      methodDescriptor_BotService_StopBot,
      callback);
};


/**
 * @param {!proto.trading.BotIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.StatusResponse>}
 *     Promise that resolves to the response
 */
proto.trading.BotServicePromiseClient.prototype.stopBot =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.BotService/StopBot',
      request,
      metadata || {},
      methodDescriptor_BotService_StopBot);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trading.BotIdRequest,
 *   !proto.trading.BotConfig>}
 */
const methodDescriptor_BotService_GetBotStatus = new grpc.web.MethodDescriptor(
  '/trading.BotService/GetBotStatus',
  grpc.web.MethodType.UNARY,
  proto.trading.BotIdRequest,
  proto.trading.BotConfig,
  /**
   * @param {!proto.trading.BotIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.trading.BotConfig.deserializeBinary
);


/**
 * @param {!proto.trading.BotIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trading.BotConfig)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trading.BotConfig>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trading.BotServiceClient.prototype.getBotStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trading.BotService/GetBotStatus',
      request,
      metadata || {},
      methodDescriptor_BotService_GetBotStatus,
      callback);
};


/**
 * @param {!proto.trading.BotIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trading.BotConfig>}
 *     Promise that resolves to the response
 */
proto.trading.BotServicePromiseClient.prototype.getBotStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trading.BotService/GetBotStatus',
      request,
      metadata || {},
      methodDescriptor_BotService_GetBotStatus);
};


module.exports = proto.trading;


# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import trading_api_pb2 as trading__api__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in trading_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TradingServiceStub(object):
    """Service for managing trading strategies and accounts
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartStrategy = channel.unary_unary(
                '/trading.TradingService/StartStrategy',
                request_serializer=trading__api__pb2.StrategyRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.StopStrategy = channel.unary_unary(
                '/trading.TradingService/StopStrategy',
                request_serializer=trading__api__pb2.StrategyRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetPortfolio = channel.unary_unary(
                '/trading.TradingService/GetPortfolio',
                request_serializer=trading__api__pb2.PortfolioRequest.SerializeToString,
                response_deserializer=trading__api__pb2.PortfolioResponse.FromString,
                _registered_method=True)
        self.SubscribeTicks = channel.unary_stream(
                '/trading.TradingService/SubscribeTicks',
                request_serializer=trading__api__pb2.StrategyRequest.SerializeToString,
                response_deserializer=trading__api__pb2.Tick.FromString,
                _registered_method=True)


class TradingServiceServicer(object):
    """Service for managing trading strategies and accounts
    """

    def StartStrategy(self, request, context):
        """Starts a trading strategy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopStrategy(self, request, context):
        """Stops a trading strategy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPortfolio(self, request, context):
        """Gets the current portfolio status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTicks(self, request, context):
        """Subscribes to a real-time feed of market data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartStrategy': grpc.unary_unary_rpc_method_handler(
                    servicer.StartStrategy,
                    request_deserializer=trading__api__pb2.StrategyRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'StopStrategy': grpc.unary_unary_rpc_method_handler(
                    servicer.StopStrategy,
                    request_deserializer=trading__api__pb2.StrategyRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'GetPortfolio': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPortfolio,
                    request_deserializer=trading__api__pb2.PortfolioRequest.FromString,
                    response_serializer=trading__api__pb2.PortfolioResponse.SerializeToString,
            ),
            'SubscribeTicks': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeTicks,
                    request_deserializer=trading__api__pb2.StrategyRequest.FromString,
                    response_serializer=trading__api__pb2.Tick.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trading.TradingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('trading.TradingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TradingService(object):
    """Service for managing trading strategies and accounts
    """

    @staticmethod
    def StartStrategy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/StartStrategy',
            trading__api__pb2.StrategyRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopStrategy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/StopStrategy',
            trading__api__pb2.StrategyRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPortfolio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/GetPortfolio',
            trading__api__pb2.PortfolioRequest.SerializeToString,
            trading__api__pb2.PortfolioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeTicks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/trading.TradingService/SubscribeTicks',
            trading__api__pb2.StrategyRequest.SerializeToString,
            trading__api__pb2.Tick.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RiskServiceStub(object):
    """Service for performing risk calculations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateVaR = channel.unary_unary(
                '/trading.RiskService/CalculateVaR',
                request_serializer=trading__api__pb2.VaRRequest.SerializeToString,
                response_deserializer=trading__api__pb2.VaRResponse.FromString,
                _registered_method=True)


class RiskServiceServicer(object):
    """Service for performing risk calculations
    """

    def CalculateVaR(self, request, context):
        """Calculates the Value at Risk for a given portfolio
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RiskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateVaR': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateVaR,
                    request_deserializer=trading__api__pb2.VaRRequest.FromString,
                    response_serializer=trading__api__pb2.VaRResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trading.RiskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('trading.RiskService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RiskService(object):
    """Service for performing risk calculations
    """

    @staticmethod
    def CalculateVaR(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.RiskService/CalculateVaR',
            trading__api__pb2.VaRRequest.SerializeToString,
            trading__api__pb2.VaRResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

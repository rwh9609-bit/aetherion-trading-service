# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import trading_api_pb2 as trading__api__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in trading_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TradingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamOrderBook = channel.unary_stream(
                '/trading.TradingService/StreamOrderBook',
                request_serializer=trading__api__pb2.OrderBookRequest.SerializeToString,
                response_deserializer=trading__api__pb2.OrderBook.FromString,
                _registered_method=True)
        self.GetPrice = channel.unary_unary(
                '/trading.TradingService/GetPrice',
                request_serializer=trading__api__pb2.Tick.SerializeToString,
                response_deserializer=trading__api__pb2.Tick.FromString,
                _registered_method=True)
        self.StartStrategy = channel.unary_unary(
                '/trading.TradingService/StartStrategy',
                request_serializer=trading__api__pb2.StrategyRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.StopStrategy = channel.unary_unary(
                '/trading.TradingService/StopStrategy',
                request_serializer=trading__api__pb2.StrategyRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetPortfolio = channel.unary_unary(
                '/trading.TradingService/GetPortfolio',
                request_serializer=trading__api__pb2.PortfolioRequest.SerializeToString,
                response_deserializer=trading__api__pb2.Portfolio.FromString,
                _registered_method=True)
        self.SubscribeTicks = channel.unary_stream(
                '/trading.TradingService/SubscribeTicks',
                request_serializer=trading__api__pb2.StrategyRequest.SerializeToString,
                response_deserializer=trading__api__pb2.Tick.FromString,
                _registered_method=True)
        self.StreamPrice = channel.unary_stream(
                '/trading.TradingService/StreamPrice',
                request_serializer=trading__api__pb2.TickStreamRequest.SerializeToString,
                response_deserializer=trading__api__pb2.Tick.FromString,
                _registered_method=True)
        self.AddSymbol = channel.unary_unary(
                '/trading.TradingService/AddSymbol',
                request_serializer=trading__api__pb2.SymbolRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.RemoveSymbol = channel.unary_unary(
                '/trading.TradingService/RemoveSymbol',
                request_serializer=trading__api__pb2.SymbolRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.ListSymbols = channel.unary_unary(
                '/trading.TradingService/ListSymbols',
                request_serializer=trading__api__pb2.Empty.SerializeToString,
                response_deserializer=trading__api__pb2.SymbolList.FromString,
                _registered_method=True)
        self.GetMomentum = channel.unary_unary(
                '/trading.TradingService/GetMomentum',
                request_serializer=trading__api__pb2.MomentumRequest.SerializeToString,
                response_deserializer=trading__api__pb2.MomentumResponse.FromString,
                _registered_method=True)
        self.CreateBot = channel.unary_unary(
                '/trading.TradingService/CreateBot',
                request_serializer=trading__api__pb2.CreateBotRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.ListBots = channel.unary_unary(
                '/trading.TradingService/ListBots',
                request_serializer=trading__api__pb2.Empty.SerializeToString,
                response_deserializer=trading__api__pb2.BotList.FromString,
                _registered_method=True)
        self.StartBot = channel.unary_unary(
                '/trading.TradingService/StartBot',
                request_serializer=trading__api__pb2.BotIdRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.StopBot = channel.unary_unary(
                '/trading.TradingService/StopBot',
                request_serializer=trading__api__pb2.BotIdRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetBotStatus = channel.unary_unary(
                '/trading.TradingService/GetBotStatus',
                request_serializer=trading__api__pb2.BotIdRequest.SerializeToString,
                response_deserializer=trading__api__pb2.BotConfig.FromString,
                _registered_method=True)
        self.ExecuteTrade = channel.unary_unary(
                '/trading.TradingService/ExecuteTrade',
                request_serializer=trading__api__pb2.TradeRequest.SerializeToString,
                response_deserializer=trading__api__pb2.TradeResponse.FromString,
                _registered_method=True)


class TradingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamOrderBook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartStrategy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopStrategy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPortfolio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTicks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddSymbol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveSymbol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSymbols(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMomentum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBots(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBotStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamOrderBook': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamOrderBook,
                    request_deserializer=trading__api__pb2.OrderBookRequest.FromString,
                    response_serializer=trading__api__pb2.OrderBook.SerializeToString,
            ),
            'GetPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrice,
                    request_deserializer=trading__api__pb2.Tick.FromString,
                    response_serializer=trading__api__pb2.Tick.SerializeToString,
            ),
            'StartStrategy': grpc.unary_unary_rpc_method_handler(
                    servicer.StartStrategy,
                    request_deserializer=trading__api__pb2.StrategyRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'StopStrategy': grpc.unary_unary_rpc_method_handler(
                    servicer.StopStrategy,
                    request_deserializer=trading__api__pb2.StrategyRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'GetPortfolio': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPortfolio,
                    request_deserializer=trading__api__pb2.PortfolioRequest.FromString,
                    response_serializer=trading__api__pb2.Portfolio.SerializeToString,
            ),
            'SubscribeTicks': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeTicks,
                    request_deserializer=trading__api__pb2.StrategyRequest.FromString,
                    response_serializer=trading__api__pb2.Tick.SerializeToString,
            ),
            'StreamPrice': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamPrice,
                    request_deserializer=trading__api__pb2.TickStreamRequest.FromString,
                    response_serializer=trading__api__pb2.Tick.SerializeToString,
            ),
            'AddSymbol': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSymbol,
                    request_deserializer=trading__api__pb2.SymbolRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'RemoveSymbol': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveSymbol,
                    request_deserializer=trading__api__pb2.SymbolRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'ListSymbols': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSymbols,
                    request_deserializer=trading__api__pb2.Empty.FromString,
                    response_serializer=trading__api__pb2.SymbolList.SerializeToString,
            ),
            'GetMomentum': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMomentum,
                    request_deserializer=trading__api__pb2.MomentumRequest.FromString,
                    response_serializer=trading__api__pb2.MomentumResponse.SerializeToString,
            ),
            'CreateBot': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBot,
                    request_deserializer=trading__api__pb2.CreateBotRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'ListBots': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBots,
                    request_deserializer=trading__api__pb2.Empty.FromString,
                    response_serializer=trading__api__pb2.BotList.SerializeToString,
            ),
            'StartBot': grpc.unary_unary_rpc_method_handler(
                    servicer.StartBot,
                    request_deserializer=trading__api__pb2.BotIdRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'StopBot': grpc.unary_unary_rpc_method_handler(
                    servicer.StopBot,
                    request_deserializer=trading__api__pb2.BotIdRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'GetBotStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBotStatus,
                    request_deserializer=trading__api__pb2.BotIdRequest.FromString,
                    response_serializer=trading__api__pb2.BotConfig.SerializeToString,
            ),
            'ExecuteTrade': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTrade,
                    request_deserializer=trading__api__pb2.TradeRequest.FromString,
                    response_serializer=trading__api__pb2.TradeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trading.TradingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('trading.TradingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TradingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamOrderBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/trading.TradingService/StreamOrderBook',
            trading__api__pb2.OrderBookRequest.SerializeToString,
            trading__api__pb2.OrderBook.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/GetPrice',
            trading__api__pb2.Tick.SerializeToString,
            trading__api__pb2.Tick.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartStrategy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/StartStrategy',
            trading__api__pb2.StrategyRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopStrategy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/StopStrategy',
            trading__api__pb2.StrategyRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPortfolio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/GetPortfolio',
            trading__api__pb2.PortfolioRequest.SerializeToString,
            trading__api__pb2.Portfolio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeTicks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/trading.TradingService/SubscribeTicks',
            trading__api__pb2.StrategyRequest.SerializeToString,
            trading__api__pb2.Tick.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/trading.TradingService/StreamPrice',
            trading__api__pb2.TickStreamRequest.SerializeToString,
            trading__api__pb2.Tick.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddSymbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/AddSymbol',
            trading__api__pb2.SymbolRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveSymbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/RemoveSymbol',
            trading__api__pb2.SymbolRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSymbols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/ListSymbols',
            trading__api__pb2.Empty.SerializeToString,
            trading__api__pb2.SymbolList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMomentum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/GetMomentum',
            trading__api__pb2.MomentumRequest.SerializeToString,
            trading__api__pb2.MomentumResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/CreateBot',
            trading__api__pb2.CreateBotRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListBots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/ListBots',
            trading__api__pb2.Empty.SerializeToString,
            trading__api__pb2.BotList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/StartBot',
            trading__api__pb2.BotIdRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/StopBot',
            trading__api__pb2.BotIdRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBotStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/GetBotStatus',
            trading__api__pb2.BotIdRequest.SerializeToString,
            trading__api__pb2.BotConfig.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.TradingService/ExecuteTrade',
            trading__api__pb2.TradeRequest.SerializeToString,
            trading__api__pb2.TradeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RiskServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateVaR = channel.unary_unary(
                '/trading.RiskService/CalculateVaR',
                request_serializer=trading__api__pb2.VaRRequest.SerializeToString,
                response_deserializer=trading__api__pb2.VaRResponse.FromString,
                _registered_method=True)


class RiskServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CalculateVaR(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RiskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateVaR': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateVaR,
                    request_deserializer=trading__api__pb2.VaRRequest.FromString,
                    response_serializer=trading__api__pb2.VaRResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trading.RiskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('trading.RiskService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RiskService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CalculateVaR(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.RiskService/CalculateVaR',
            trading__api__pb2.VaRRequest.SerializeToString,
            trading__api__pb2.VaRResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/trading.AuthService/Register',
                request_serializer=trading__api__pb2.RegisterRequest.SerializeToString,
                response_deserializer=trading__api__pb2.AuthResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/trading.AuthService/Login',
                request_serializer=trading__api__pb2.AuthRequest.SerializeToString,
                response_deserializer=trading__api__pb2.AuthResponse.FromString,
                _registered_method=True)


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=trading__api__pb2.RegisterRequest.FromString,
                    response_serializer=trading__api__pb2.AuthResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=trading__api__pb2.AuthRequest.FromString,
                    response_serializer=trading__api__pb2.AuthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trading.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('trading.AuthService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.AuthService/Register',
            trading__api__pb2.RegisterRequest.SerializeToString,
            trading__api__pb2.AuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.AuthService/Login',
            trading__api__pb2.AuthRequest.SerializeToString,
            trading__api__pb2.AuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

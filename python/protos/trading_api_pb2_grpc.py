# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import trading_api_pb2 as trading__api__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in trading_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthServiceStub(object):
    """=================================================================
    AUTH & USER SERVICE
    =================================================================

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/aetherion.AuthService/Register',
                request_serializer=trading__api__pb2.RegisterRequest.SerializeToString,
                response_deserializer=trading__api__pb2.AuthResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/aetherion.AuthService/Login',
                request_serializer=trading__api__pb2.AuthRequest.SerializeToString,
                response_deserializer=trading__api__pb2.AuthResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/aetherion.AuthService/GetUser',
                request_serializer=trading__api__pb2.GetUserRequest.SerializeToString,
                response_deserializer=trading__api__pb2.UserInfo.FromString,
                _registered_method=True)


class AuthServiceServicer(object):
    """=================================================================
    AUTH & USER SERVICE
    =================================================================

    """

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=trading__api__pb2.RegisterRequest.FromString,
                    response_serializer=trading__api__pb2.AuthResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=trading__api__pb2.AuthRequest.FromString,
                    response_serializer=trading__api__pb2.AuthResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=trading__api__pb2.GetUserRequest.FromString,
                    response_serializer=trading__api__pb2.UserInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aetherion.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('aetherion.AuthService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """=================================================================
    AUTH & USER SERVICE
    =================================================================

    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.AuthService/Register',
            trading__api__pb2.RegisterRequest.SerializeToString,
            trading__api__pb2.AuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.AuthService/Login',
            trading__api__pb2.AuthRequest.SerializeToString,
            trading__api__pb2.AuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.AuthService/GetUser',
            trading__api__pb2.GetUserRequest.SerializeToString,
            trading__api__pb2.UserInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class BotServiceStub(object):
    """=================================================================
    BOT MANAGEMENT SERVICE
    =================================================================

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBot = channel.unary_unary(
                '/aetherion.BotService/CreateBot',
                request_serializer=trading__api__pb2.CreateBotRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetBot = channel.unary_unary(
                '/aetherion.BotService/GetBot',
                request_serializer=trading__api__pb2.BotIdRequest.SerializeToString,
                response_deserializer=trading__api__pb2.Bot.FromString,
                _registered_method=True)
        self.ListBots = channel.unary_unary(
                '/aetherion.BotService/ListBots',
                request_serializer=trading__api__pb2.ListBotsRequest.SerializeToString,
                response_deserializer=trading__api__pb2.BotList.FromString,
                _registered_method=True)
        self.UpdateBot = channel.unary_unary(
                '/aetherion.BotService/UpdateBot',
                request_serializer=trading__api__pb2.UpdateBotRequest.SerializeToString,
                response_deserializer=trading__api__pb2.Bot.FromString,
                _registered_method=True)
        self.DeleteBot = channel.unary_unary(
                '/aetherion.BotService/DeleteBot',
                request_serializer=trading__api__pb2.BotIdRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.StartBot = channel.unary_unary(
                '/aetherion.BotService/StartBot',
                request_serializer=trading__api__pb2.BotIdRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.StopBot = channel.unary_unary(
                '/aetherion.BotService/StopBot',
                request_serializer=trading__api__pb2.BotIdRequest.SerializeToString,
                response_deserializer=trading__api__pb2.StatusResponse.FromString,
                _registered_method=True)


class BotServiceServicer(object):
    """=================================================================
    BOT MANAGEMENT SERVICE
    =================================================================

    """

    def CreateBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBots(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBot': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBot,
                    request_deserializer=trading__api__pb2.CreateBotRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'GetBot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBot,
                    request_deserializer=trading__api__pb2.BotIdRequest.FromString,
                    response_serializer=trading__api__pb2.Bot.SerializeToString,
            ),
            'ListBots': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBots,
                    request_deserializer=trading__api__pb2.ListBotsRequest.FromString,
                    response_serializer=trading__api__pb2.BotList.SerializeToString,
            ),
            'UpdateBot': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBot,
                    request_deserializer=trading__api__pb2.UpdateBotRequest.FromString,
                    response_serializer=trading__api__pb2.Bot.SerializeToString,
            ),
            'DeleteBot': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBot,
                    request_deserializer=trading__api__pb2.BotIdRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'StartBot': grpc.unary_unary_rpc_method_handler(
                    servicer.StartBot,
                    request_deserializer=trading__api__pb2.BotIdRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
            'StopBot': grpc.unary_unary_rpc_method_handler(
                    servicer.StopBot,
                    request_deserializer=trading__api__pb2.BotIdRequest.FromString,
                    response_serializer=trading__api__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aetherion.BotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('aetherion.BotService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BotService(object):
    """=================================================================
    BOT MANAGEMENT SERVICE
    =================================================================

    """

    @staticmethod
    def CreateBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.BotService/CreateBot',
            trading__api__pb2.CreateBotRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.BotService/GetBot',
            trading__api__pb2.BotIdRequest.SerializeToString,
            trading__api__pb2.Bot.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListBots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.BotService/ListBots',
            trading__api__pb2.ListBotsRequest.SerializeToString,
            trading__api__pb2.BotList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.BotService/UpdateBot',
            trading__api__pb2.UpdateBotRequest.SerializeToString,
            trading__api__pb2.Bot.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.BotService/DeleteBot',
            trading__api__pb2.BotIdRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.BotService/StartBot',
            trading__api__pb2.BotIdRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.BotService/StopBot',
            trading__api__pb2.BotIdRequest.SerializeToString,
            trading__api__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OrderServiceStub(object):
    """=================================================================
    ORDER & TRADE SERVICE (REPLACES TradingService)
    =================================================================

    CHANGED: This service now correctly models the order lifecycle.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrder = channel.unary_unary(
                '/aetherion.OrderService/CreateOrder',
                request_serializer=trading__api__pb2.CreateOrderRequest.SerializeToString,
                response_deserializer=trading__api__pb2.Order.FromString,
                _registered_method=True)
        self.CancelOrder = channel.unary_unary(
                '/aetherion.OrderService/CancelOrder',
                request_serializer=trading__api__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=trading__api__pb2.Order.FromString,
                _registered_method=True)
        self.GetOrder = channel.unary_unary(
                '/aetherion.OrderService/GetOrder',
                request_serializer=trading__api__pb2.GetOrderRequest.SerializeToString,
                response_deserializer=trading__api__pb2.Order.FromString,
                _registered_method=True)
        self.GetTradeHistory = channel.unary_unary(
                '/aetherion.OrderService/GetTradeHistory',
                request_serializer=trading__api__pb2.TradeHistoryRequest.SerializeToString,
                response_deserializer=trading__api__pb2.TradeHistoryResponse.FromString,
                _registered_method=True)


class OrderServiceServicer(object):
    """=================================================================
    ORDER & TRADE SERVICE (REPLACES TradingService)
    =================================================================

    CHANGED: This service now correctly models the order lifecycle.
    """

    def CreateOrder(self, request, context):
        """Create a new order (intent to trade)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """Cancel a pending or partially filled order
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrder(self, request, context):
        """Get the status and details of a specific order
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTradeHistory(self, request, context):
        """Get trade history for a bot
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrder,
                    request_deserializer=trading__api__pb2.CreateOrderRequest.FromString,
                    response_serializer=trading__api__pb2.Order.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=trading__api__pb2.CancelOrderRequest.FromString,
                    response_serializer=trading__api__pb2.Order.SerializeToString,
            ),
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=trading__api__pb2.GetOrderRequest.FromString,
                    response_serializer=trading__api__pb2.Order.SerializeToString,
            ),
            'GetTradeHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTradeHistory,
                    request_deserializer=trading__api__pb2.TradeHistoryRequest.FromString,
                    response_serializer=trading__api__pb2.TradeHistoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aetherion.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('aetherion.OrderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """=================================================================
    ORDER & TRADE SERVICE (REPLACES TradingService)
    =================================================================

    CHANGED: This service now correctly models the order lifecycle.
    """

    @staticmethod
    def CreateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.OrderService/CreateOrder',
            trading__api__pb2.CreateOrderRequest.SerializeToString,
            trading__api__pb2.Order.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.OrderService/CancelOrder',
            trading__api__pb2.CancelOrderRequest.SerializeToString,
            trading__api__pb2.Order.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.OrderService/GetOrder',
            trading__api__pb2.GetOrderRequest.SerializeToString,
            trading__api__pb2.Order.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTradeHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.OrderService/GetTradeHistory',
            trading__api__pb2.TradeHistoryRequest.SerializeToString,
            trading__api__pb2.TradeHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PortfolioServiceStub(object):
    """=================================================================
    PORTFOLIO & PERFORMANCE SERVICE
    =================================================================

    ADDED: A new service to handle portfolio and performance data.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPortfolio = channel.unary_unary(
                '/aetherion.PortfolioService/GetPortfolio',
                request_serializer=trading__api__pb2.PortfolioRequest.SerializeToString,
                response_deserializer=trading__api__pb2.PortfolioResponse.FromString,
                _registered_method=True)
        self.GetPerformanceHistory = channel.unary_unary(
                '/aetherion.PortfolioService/GetPerformanceHistory',
                request_serializer=trading__api__pb2.PerformanceHistoryRequest.SerializeToString,
                response_deserializer=trading__api__pb2.PerformanceHistoryResponse.FromString,
                _registered_method=True)


class PortfolioServiceServicer(object):
    """=================================================================
    PORTFOLIO & PERFORMANCE SERVICE
    =================================================================

    ADDED: A new service to handle portfolio and performance data.
    """

    def GetPortfolio(self, request, context):
        """Gets the current portfolio status for a bot
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPerformanceHistory(self, request, context):
        """Gets historical performance snapshots for charting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PortfolioServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPortfolio': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPortfolio,
                    request_deserializer=trading__api__pb2.PortfolioRequest.FromString,
                    response_serializer=trading__api__pb2.PortfolioResponse.SerializeToString,
            ),
            'GetPerformanceHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPerformanceHistory,
                    request_deserializer=trading__api__pb2.PerformanceHistoryRequest.FromString,
                    response_serializer=trading__api__pb2.PerformanceHistoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aetherion.PortfolioService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('aetherion.PortfolioService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PortfolioService(object):
    """=================================================================
    PORTFOLIO & PERFORMANCE SERVICE
    =================================================================

    ADDED: A new service to handle portfolio and performance data.
    """

    @staticmethod
    def GetPortfolio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.PortfolioService/GetPortfolio',
            trading__api__pb2.PortfolioRequest.SerializeToString,
            trading__api__pb2.PortfolioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPerformanceHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aetherion.PortfolioService/GetPerformanceHistory',
            trading__api__pb2.PerformanceHistoryRequest.SerializeToString,
            trading__api__pb2.PerformanceHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.3
// source: trading_api.proto

package gen

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a single market data tick
type Tick struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price         float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	TimestampNs   int64                  `protobuf:"varint,3,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"` // Nanosecond precision timestamp
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tick) Reset() {
	*x = Tick{}
	mi := &file_trading_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tick) ProtoMessage() {}

func (x *Tick) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tick.ProtoReflect.Descriptor instead.
func (*Tick) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{0}
}

func (x *Tick) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Tick) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Tick) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

// Request to stream live price ticks (optional symbol filter; empty = all subscribed symbols server supports)
type TickStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TickStreamRequest) Reset() {
	*x = TickStreamRequest{}
	mi := &file_trading_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TickStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickStreamRequest) ProtoMessage() {}

func (x *TickStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickStreamRequest.ProtoReflect.Descriptor instead.
func (*TickStreamRequest) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{1}
}

func (x *TickStreamRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// Generic symbol request for add/remove symbol operations
type SymbolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SymbolRequest) Reset() {
	*x = SymbolRequest{}
	mi := &file_trading_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolRequest) ProtoMessage() {}

func (x *SymbolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolRequest.ProtoReflect.Descriptor instead.
func (*SymbolRequest) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{2}
}

func (x *SymbolRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// Empty request placeholder
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_trading_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{3}
}

// Response listing active market data symbols
type SymbolList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbols       []string               `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SymbolList) Reset() {
	*x = SymbolList{}
	mi := &file_trading_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolList) ProtoMessage() {}

func (x *SymbolList) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolList.ProtoReflect.Descriptor instead.
func (*SymbolList) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{4}
}

func (x *SymbolList) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// Request to start or stop a strategy
type StrategyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StrategyId    string                 `protobuf:"bytes,1,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Parameters    map[string]string      `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // e.g., {"order_size": "10", "threshold": "0.5"}
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StrategyRequest) Reset() {
	*x = StrategyRequest{}
	mi := &file_trading_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyRequest) ProtoMessage() {}

func (x *StrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyRequest.ProtoReflect.Descriptor instead.
func (*StrategyRequest) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{5}
}

func (x *StrategyRequest) GetStrategyId() string {
	if x != nil {
		return x.StrategyId
	}
	return ""
}

func (x *StrategyRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StrategyRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Generic response for operations
type StatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"` // optional identifier (e.g., strategy/bot id)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_trading_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{6}
}

func (x *StatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request to get portfolio status
type PortfolioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortfolioRequest) Reset() {
	*x = PortfolioRequest{}
	mi := &file_trading_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortfolioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioRequest) ProtoMessage() {}

func (x *PortfolioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioRequest.ProtoReflect.Descriptor instead.
func (*PortfolioRequest) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{7}
}

func (x *PortfolioRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Response with portfolio details
// Portfolio snapshot at a point in time
type Portfolio struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Positions       map[string]float64     `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"` // Map of symbol to quantity
	TotalValueUsd   float64                `protobuf:"fixed64,2,opt,name=total_value_usd,json=totalValueUsd,proto3" json:"total_value_usd,omitempty"`
	LastPriceChange *float64               `protobuf:"fixed64,3,opt,name=last_price_change,json=lastPriceChange,proto3,oneof" json:"last_price_change,omitempty"` // Last observed price change percentage
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Portfolio) Reset() {
	*x = Portfolio{}
	mi := &file_trading_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Portfolio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Portfolio) ProtoMessage() {}

func (x *Portfolio) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Portfolio.ProtoReflect.Descriptor instead.
func (*Portfolio) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{8}
}

func (x *Portfolio) GetPositions() map[string]float64 {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *Portfolio) GetTotalValueUsd() float64 {
	if x != nil {
		return x.TotalValueUsd
	}
	return 0
}

func (x *Portfolio) GetLastPriceChange() float64 {
	if x != nil && x.LastPriceChange != nil {
		return *x.LastPriceChange
	}
	return 0
}

// Request to calculate Value at Risk (VaR)
type VaRRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CurrentPortfolio *Portfolio             `protobuf:"bytes,1,opt,name=current_portfolio,json=currentPortfolio,proto3" json:"current_portfolio,omitempty"`
	RiskModel        string                 `protobuf:"bytes,2,opt,name=risk_model,json=riskModel,proto3" json:"risk_model,omitempty"`                     // e.g., "monte_carlo"
	ConfidenceLevel  float64                `protobuf:"fixed64,3,opt,name=confidence_level,json=confidenceLevel,proto3" json:"confidence_level,omitempty"` // e.g., 0.95
	HorizonDays      float64                `protobuf:"fixed64,4,opt,name=horizon_days,json=horizonDays,proto3" json:"horizon_days,omitempty"`             // time horizon in days (e.g., 1)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VaRRequest) Reset() {
	*x = VaRRequest{}
	mi := &file_trading_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaRRequest) ProtoMessage() {}

func (x *VaRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaRRequest.ProtoReflect.Descriptor instead.
func (*VaRRequest) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{9}
}

func (x *VaRRequest) GetCurrentPortfolio() *Portfolio {
	if x != nil {
		return x.CurrentPortfolio
	}
	return nil
}

func (x *VaRRequest) GetRiskModel() string {
	if x != nil {
		return x.RiskModel
	}
	return ""
}

func (x *VaRRequest) GetConfidenceLevel() float64 {
	if x != nil {
		return x.ConfidenceLevel
	}
	return 0
}

func (x *VaRRequest) GetHorizonDays() float64 {
	if x != nil {
		return x.HorizonDays
	}
	return 0
}

// Response with the calculated VaR
type VaRResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ValueAtRisk        float64                `protobuf:"fixed64,1,opt,name=value_at_risk,json=valueAtRisk,proto3" json:"value_at_risk,omitempty"`
	AssetNames         []string               `protobuf:"bytes,2,rep,name=asset_names,json=assetNames,proto3" json:"asset_names,omitempty"`
	CorrelationMatrix  []float64              `protobuf:"fixed64,3,rep,packed,name=correlation_matrix,json=correlationMatrix,proto3" json:"correlation_matrix,omitempty"` // row-major flattened
	VolatilityPerAsset []float64              `protobuf:"fixed64,4,rep,packed,name=volatility_per_asset,json=volatilityPerAsset,proto3" json:"volatility_per_asset,omitempty"`
	SimulationMode     string                 `protobuf:"bytes,5,opt,name=simulation_mode,json=simulationMode,proto3" json:"simulation_mode,omitempty"`
	LastUpdate         string                 `protobuf:"bytes,6,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *VaRResponse) Reset() {
	*x = VaRResponse{}
	mi := &file_trading_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaRResponse) ProtoMessage() {}

func (x *VaRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaRResponse.ProtoReflect.Descriptor instead.
func (*VaRResponse) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{10}
}

func (x *VaRResponse) GetValueAtRisk() float64 {
	if x != nil {
		return x.ValueAtRisk
	}
	return 0
}

func (x *VaRResponse) GetAssetNames() []string {
	if x != nil {
		return x.AssetNames
	}
	return nil
}

func (x *VaRResponse) GetCorrelationMatrix() []float64 {
	if x != nil {
		return x.CorrelationMatrix
	}
	return nil
}

func (x *VaRResponse) GetVolatilityPerAsset() []float64 {
	if x != nil {
		return x.VolatilityPerAsset
	}
	return nil
}

func (x *VaRResponse) GetSimulationMode() string {
	if x != nil {
		return x.SimulationMode
	}
	return ""
}

func (x *VaRResponse) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

// Trade execution messages
type TradeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Side          string                 `protobuf:"bytes,2,opt,name=side,proto3" json:"side,omitempty"`     // BUY or SELL
	Size          float64                `protobuf:"fixed64,3,opt,name=size,proto3" json:"size,omitempty"`   // quantity in base asset
	Price         float64                `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"` // intended execution price
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeRequest) Reset() {
	*x = TradeRequest{}
	mi := &file_trading_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRequest) ProtoMessage() {}

func (x *TradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRequest.ProtoReflect.Descriptor instead.
func (*TradeRequest) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{11}
}

func (x *TradeRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradeRequest) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *TradeRequest) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TradeRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type TradeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accepted      bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ExecutedPrice float64                `protobuf:"fixed64,3,opt,name=executed_price,json=executedPrice,proto3" json:"executed_price,omitempty"`
	Pnl           float64                `protobuf:"fixed64,4,opt,name=pnl,proto3" json:"pnl,omitempty"` // realized PnL for closing trades (simplified)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeResponse) Reset() {
	*x = TradeResponse{}
	mi := &file_trading_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeResponse) ProtoMessage() {}

func (x *TradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeResponse.ProtoReflect.Descriptor instead.
func (*TradeResponse) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{12}
}

func (x *TradeResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *TradeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TradeResponse) GetExecutedPrice() float64 {
	if x != nil {
		return x.ExecutedPrice
	}
	return 0
}

func (x *TradeResponse) GetPnl() float64 {
	if x != nil {
		return x.Pnl
	}
	return 0
}

// OrderBook related messages
type OrderBookEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         float64                `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Size          float64                `protobuf:"fixed64,2,opt,name=size,proto3" json:"size,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Unix epoch milliseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookEntry) Reset() {
	*x = OrderBookEntry{}
	mi := &file_trading_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookEntry) ProtoMessage() {}

func (x *OrderBookEntry) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookEntry.ProtoReflect.Descriptor instead.
func (*OrderBookEntry) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{13}
}

func (x *OrderBookEntry) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderBookEntry) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OrderBookEntry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type OrderBook struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bids          []*OrderBookEntry      `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks          []*OrderBookEntry      `protobuf:"bytes,2,rep,name=asks,proto3" json:"asks,omitempty"`
	Symbol        string                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	mi := &file_trading_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{14}
}

func (x *OrderBook) GetBids() []*OrderBookEntry {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OrderBook) GetAsks() []*OrderBookEntry {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *OrderBook) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type OrderBookRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookRequest) Reset() {
	*x = OrderBookRequest{}
	mi := &file_trading_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookRequest) ProtoMessage() {}

func (x *OrderBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookRequest.ProtoReflect.Descriptor instead.
func (*OrderBookRequest) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{15}
}

func (x *OrderBookRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// --- Momentum Scanner (server-side aggregation) ---
// Request momentum metrics for specified symbols. If symbols empty, server returns all tracked symbols.
type MomentumRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbols       []string               `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"` // optional filter list
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MomentumRequest) Reset() {
	*x = MomentumRequest{}
	mi := &file_trading_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MomentumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentumRequest) ProtoMessage() {}

func (x *MomentumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentumRequest.ProtoReflect.Descriptor instead.
func (*MomentumRequest) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{16}
}

func (x *MomentumRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// Per-symbol momentum & volatility metrics (short-term heuristic)
type MomentumMetric struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	LastPrice     float64                `protobuf:"fixed64,2,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	PctChange_1M  float64                `protobuf:"fixed64,3,opt,name=pct_change_1m,json=pctChange1m,proto3" json:"pct_change_1m,omitempty"`     // percentage change over ~1 minute
	PctChange_5M  float64                `protobuf:"fixed64,4,opt,name=pct_change_5m,json=pctChange5m,proto3" json:"pct_change_5m,omitempty"`     // percentage change over ~5 minutes
	Volatility    float64                `protobuf:"fixed64,5,opt,name=volatility,proto3" json:"volatility,omitempty"`                            // standard deviation of log returns (annualized approximation)
	MomentumScore float64                `protobuf:"fixed64,6,opt,name=momentum_score,json=momentumScore,proto3" json:"momentum_score,omitempty"` // composite score (weighted changes - volatility penalty)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MomentumMetric) Reset() {
	*x = MomentumMetric{}
	mi := &file_trading_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MomentumMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentumMetric) ProtoMessage() {}

func (x *MomentumMetric) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentumMetric.ProtoReflect.Descriptor instead.
func (*MomentumMetric) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{17}
}

func (x *MomentumMetric) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MomentumMetric) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *MomentumMetric) GetPctChange_1M() float64 {
	if x != nil {
		return x.PctChange_1M
	}
	return 0
}

func (x *MomentumMetric) GetPctChange_5M() float64 {
	if x != nil {
		return x.PctChange_5M
	}
	return 0
}

func (x *MomentumMetric) GetVolatility() float64 {
	if x != nil {
		return x.Volatility
	}
	return 0
}

func (x *MomentumMetric) GetMomentumScore() float64 {
	if x != nil {
		return x.MomentumScore
	}
	return 0
}

type MomentumResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Metrics           []*MomentumMetric      `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	GeneratedAtUnixMs int64                  `protobuf:"varint,2,opt,name=generated_at_unix_ms,json=generatedAtUnixMs,proto3" json:"generated_at_unix_ms,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MomentumResponse) Reset() {
	*x = MomentumResponse{}
	mi := &file_trading_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MomentumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentumResponse) ProtoMessage() {}

func (x *MomentumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentumResponse.ProtoReflect.Descriptor instead.
func (*MomentumResponse) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{18}
}

func (x *MomentumResponse) GetMetrics() []*MomentumMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *MomentumResponse) GetGeneratedAtUnixMs() int64 {
	if x != nil {
		return x.GeneratedAtUnixMs
	}
	return 0
}

// --- Authentication & User Management ---
// Request to register a new user
type RegisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // Plaintext over TLS; will be hashed server-side
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_trading_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{19}
}

func (x *RegisterRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Request to login
type AuthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthRequest) Reset() {
	*x = AuthRequest{}
	mi := &file_trading_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequest) ProtoMessage() {}

func (x *AuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequest.ProtoReflect.Descriptor instead.
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{20}
}

func (x *AuthRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Response containing JWT token
type AuthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Token         string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`                                         // JWT bearer token
	ExpiresAtUnix int64                  `protobuf:"varint,4,opt,name=expires_at_unix,json=expiresAtUnix,proto3" json:"expires_at_unix,omitempty"` // Expiration timestamp (seconds since epoch)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthResponse) Reset() {
	*x = AuthResponse{}
	mi := &file_trading_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResponse) ProtoMessage() {}

func (x *AuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trading_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResponse.ProtoReflect.Descriptor instead.
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return file_trading_api_proto_rawDescGZIP(), []int{21}
}

func (x *AuthResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AuthResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AuthResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AuthResponse) GetExpiresAtUnix() int64 {
	if x != nil {
		return x.ExpiresAtUnix
	}
	return 0
}

var File_trading_api_proto protoreflect.FileDescriptor

const file_trading_api_proto_rawDesc = "" +
	"\n" +
	"\x11trading_api.proto\x12\atrading\"W\n" +
	"\x04Tick\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x14\n" +
	"\x05price\x18\x02 \x01(\x01R\x05price\x12!\n" +
	"\ftimestamp_ns\x18\x03 \x01(\x03R\vtimestampNs\"+\n" +
	"\x11TickStreamRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\"'\n" +
	"\rSymbolRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\"\a\n" +
	"\x05Empty\"&\n" +
	"\n" +
	"SymbolList\x12\x18\n" +
	"\asymbols\x18\x01 \x03(\tR\asymbols\"\xd3\x01\n" +
	"\x0fStrategyRequest\x12\x1f\n" +
	"\vstrategy_id\x18\x01 \x01(\tR\n" +
	"strategyId\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12H\n" +
	"\n" +
	"parameters\x18\x03 \x03(\v2(.trading.StrategyRequest.ParametersEntryR\n" +
	"parameters\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"T\n" +
	"\x0eStatusResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\"1\n" +
	"\x10PortfolioRequest\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\"\xf9\x01\n" +
	"\tPortfolio\x12?\n" +
	"\tpositions\x18\x01 \x03(\v2!.trading.Portfolio.PositionsEntryR\tpositions\x12&\n" +
	"\x0ftotal_value_usd\x18\x02 \x01(\x01R\rtotalValueUsd\x12/\n" +
	"\x11last_price_change\x18\x03 \x01(\x01H\x00R\x0flastPriceChange\x88\x01\x01\x1a<\n" +
	"\x0ePositionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01B\x14\n" +
	"\x12_last_price_change\"\xba\x01\n" +
	"\n" +
	"VaRRequest\x12?\n" +
	"\x11current_portfolio\x18\x01 \x01(\v2\x12.trading.PortfolioR\x10currentPortfolio\x12\x1d\n" +
	"\n" +
	"risk_model\x18\x02 \x01(\tR\triskModel\x12)\n" +
	"\x10confidence_level\x18\x03 \x01(\x01R\x0fconfidenceLevel\x12!\n" +
	"\fhorizon_days\x18\x04 \x01(\x01R\vhorizonDays\"\xfd\x01\n" +
	"\vVaRResponse\x12\"\n" +
	"\rvalue_at_risk\x18\x01 \x01(\x01R\vvalueAtRisk\x12\x1f\n" +
	"\vasset_names\x18\x02 \x03(\tR\n" +
	"assetNames\x12-\n" +
	"\x12correlation_matrix\x18\x03 \x03(\x01R\x11correlationMatrix\x120\n" +
	"\x14volatility_per_asset\x18\x04 \x03(\x01R\x12volatilityPerAsset\x12'\n" +
	"\x0fsimulation_mode\x18\x05 \x01(\tR\x0esimulationMode\x12\x1f\n" +
	"\vlast_update\x18\x06 \x01(\tR\n" +
	"lastUpdate\"d\n" +
	"\fTradeRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x12\n" +
	"\x04side\x18\x02 \x01(\tR\x04side\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x01R\x04size\x12\x14\n" +
	"\x05price\x18\x04 \x01(\x01R\x05price\"~\n" +
	"\rTradeResponse\x12\x1a\n" +
	"\baccepted\x18\x01 \x01(\bR\baccepted\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12%\n" +
	"\x0eexecuted_price\x18\x03 \x01(\x01R\rexecutedPrice\x12\x10\n" +
	"\x03pnl\x18\x04 \x01(\x01R\x03pnl\"X\n" +
	"\x0eOrderBookEntry\x12\x14\n" +
	"\x05price\x18\x01 \x01(\x01R\x05price\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x01R\x04size\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"}\n" +
	"\tOrderBook\x12+\n" +
	"\x04bids\x18\x01 \x03(\v2\x17.trading.OrderBookEntryR\x04bids\x12+\n" +
	"\x04asks\x18\x02 \x03(\v2\x17.trading.OrderBookEntryR\x04asks\x12\x16\n" +
	"\x06symbol\x18\x03 \x01(\tR\x06symbol\"*\n" +
	"\x10OrderBookRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\"+\n" +
	"\x0fMomentumRequest\x12\x18\n" +
	"\asymbols\x18\x01 \x03(\tR\asymbols\"\xd6\x01\n" +
	"\x0eMomentumMetric\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x1d\n" +
	"\n" +
	"last_price\x18\x02 \x01(\x01R\tlastPrice\x12\"\n" +
	"\rpct_change_1m\x18\x03 \x01(\x01R\vpctChange1m\x12\"\n" +
	"\rpct_change_5m\x18\x04 \x01(\x01R\vpctChange5m\x12\x1e\n" +
	"\n" +
	"volatility\x18\x05 \x01(\x01R\n" +
	"volatility\x12%\n" +
	"\x0emomentum_score\x18\x06 \x01(\x01R\rmomentumScore\"v\n" +
	"\x10MomentumResponse\x121\n" +
	"\ametrics\x18\x01 \x03(\v2\x17.trading.MomentumMetricR\ametrics\x12/\n" +
	"\x14generated_at_unix_ms\x18\x02 \x01(\x03R\x11generatedAtUnixMs\"I\n" +
	"\x0fRegisterRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\"E\n" +
	"\vAuthRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\"\x80\x01\n" +
	"\fAuthResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x14\n" +
	"\x05token\x18\x03 \x01(\tR\x05token\x12&\n" +
	"\x0fexpires_at_unix\x18\x04 \x01(\x03R\rexpiresAtUnix2\x8b\x06\n" +
	"\x0eTradingService\x12D\n" +
	"\x0fStreamOrderBook\x12\x19.trading.OrderBookRequest\x1a\x12.trading.OrderBook\"\x000\x01\x12*\n" +
	"\bGetPrice\x12\r.trading.Tick\x1a\r.trading.Tick\"\x00\x12D\n" +
	"\rStartStrategy\x12\x18.trading.StrategyRequest\x1a\x17.trading.StatusResponse\"\x00\x12C\n" +
	"\fStopStrategy\x12\x18.trading.StrategyRequest\x1a\x17.trading.StatusResponse\"\x00\x12?\n" +
	"\fGetPortfolio\x12\x19.trading.PortfolioRequest\x1a\x12.trading.Portfolio\"\x00\x12=\n" +
	"\x0eSubscribeTicks\x12\x18.trading.StrategyRequest\x1a\r.trading.Tick\"\x000\x01\x12<\n" +
	"\vStreamPrice\x12\x1a.trading.TickStreamRequest\x1a\r.trading.Tick\"\x000\x01\x12>\n" +
	"\tAddSymbol\x12\x16.trading.SymbolRequest\x1a\x17.trading.StatusResponse\"\x00\x12A\n" +
	"\fRemoveSymbol\x12\x16.trading.SymbolRequest\x1a\x17.trading.StatusResponse\"\x00\x124\n" +
	"\vListSymbols\x12\x0e.trading.Empty\x1a\x13.trading.SymbolList\"\x00\x12D\n" +
	"\vGetMomentum\x12\x18.trading.MomentumRequest\x1a\x19.trading.MomentumResponse\"\x00\x12?\n" +
	"\fExecuteTrade\x12\x15.trading.TradeRequest\x1a\x16.trading.TradeResponse\"\x002J\n" +
	"\vRiskService\x12;\n" +
	"\fCalculateVaR\x12\x13.trading.VaRRequest\x1a\x14.trading.VaRResponse\"\x002\x84\x01\n" +
	"\vAuthService\x12=\n" +
	"\bRegister\x12\x18.trading.RegisterRequest\x1a\x15.trading.AuthResponse\"\x00\x126\n" +
	"\x05Login\x12\x14.trading.AuthRequest\x1a\x15.trading.AuthResponse\"\x00B-Z+github.com/rwh9609-bit/multilanguage/go/genb\x06proto3"

var (
	file_trading_api_proto_rawDescOnce sync.Once
	file_trading_api_proto_rawDescData []byte
)

func file_trading_api_proto_rawDescGZIP() []byte {
	file_trading_api_proto_rawDescOnce.Do(func() {
		file_trading_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_trading_api_proto_rawDesc), len(file_trading_api_proto_rawDesc)))
	})
	return file_trading_api_proto_rawDescData
}

var file_trading_api_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_trading_api_proto_goTypes = []any{
	(*Tick)(nil),              // 0: trading.Tick
	(*TickStreamRequest)(nil), // 1: trading.TickStreamRequest
	(*SymbolRequest)(nil),     // 2: trading.SymbolRequest
	(*Empty)(nil),             // 3: trading.Empty
	(*SymbolList)(nil),        // 4: trading.SymbolList
	(*StrategyRequest)(nil),   // 5: trading.StrategyRequest
	(*StatusResponse)(nil),    // 6: trading.StatusResponse
	(*PortfolioRequest)(nil),  // 7: trading.PortfolioRequest
	(*Portfolio)(nil),         // 8: trading.Portfolio
	(*VaRRequest)(nil),        // 9: trading.VaRRequest
	(*VaRResponse)(nil),       // 10: trading.VaRResponse
	(*TradeRequest)(nil),      // 11: trading.TradeRequest
	(*TradeResponse)(nil),     // 12: trading.TradeResponse
	(*OrderBookEntry)(nil),    // 13: trading.OrderBookEntry
	(*OrderBook)(nil),         // 14: trading.OrderBook
	(*OrderBookRequest)(nil),  // 15: trading.OrderBookRequest
	(*MomentumRequest)(nil),   // 16: trading.MomentumRequest
	(*MomentumMetric)(nil),    // 17: trading.MomentumMetric
	(*MomentumResponse)(nil),  // 18: trading.MomentumResponse
	(*RegisterRequest)(nil),   // 19: trading.RegisterRequest
	(*AuthRequest)(nil),       // 20: trading.AuthRequest
	(*AuthResponse)(nil),      // 21: trading.AuthResponse
	nil,                       // 22: trading.StrategyRequest.ParametersEntry
	nil,                       // 23: trading.Portfolio.PositionsEntry
}
var file_trading_api_proto_depIdxs = []int32{
	22, // 0: trading.StrategyRequest.parameters:type_name -> trading.StrategyRequest.ParametersEntry
	23, // 1: trading.Portfolio.positions:type_name -> trading.Portfolio.PositionsEntry
	8,  // 2: trading.VaRRequest.current_portfolio:type_name -> trading.Portfolio
	13, // 3: trading.OrderBook.bids:type_name -> trading.OrderBookEntry
	13, // 4: trading.OrderBook.asks:type_name -> trading.OrderBookEntry
	17, // 5: trading.MomentumResponse.metrics:type_name -> trading.MomentumMetric
	15, // 6: trading.TradingService.StreamOrderBook:input_type -> trading.OrderBookRequest
	0,  // 7: trading.TradingService.GetPrice:input_type -> trading.Tick
	5,  // 8: trading.TradingService.StartStrategy:input_type -> trading.StrategyRequest
	5,  // 9: trading.TradingService.StopStrategy:input_type -> trading.StrategyRequest
	7,  // 10: trading.TradingService.GetPortfolio:input_type -> trading.PortfolioRequest
	5,  // 11: trading.TradingService.SubscribeTicks:input_type -> trading.StrategyRequest
	1,  // 12: trading.TradingService.StreamPrice:input_type -> trading.TickStreamRequest
	2,  // 13: trading.TradingService.AddSymbol:input_type -> trading.SymbolRequest
	2,  // 14: trading.TradingService.RemoveSymbol:input_type -> trading.SymbolRequest
	3,  // 15: trading.TradingService.ListSymbols:input_type -> trading.Empty
	16, // 16: trading.TradingService.GetMomentum:input_type -> trading.MomentumRequest
	11, // 17: trading.TradingService.ExecuteTrade:input_type -> trading.TradeRequest
	9,  // 18: trading.RiskService.CalculateVaR:input_type -> trading.VaRRequest
	19, // 19: trading.AuthService.Register:input_type -> trading.RegisterRequest
	20, // 20: trading.AuthService.Login:input_type -> trading.AuthRequest
	14, // 21: trading.TradingService.StreamOrderBook:output_type -> trading.OrderBook
	0,  // 22: trading.TradingService.GetPrice:output_type -> trading.Tick
	6,  // 23: trading.TradingService.StartStrategy:output_type -> trading.StatusResponse
	6,  // 24: trading.TradingService.StopStrategy:output_type -> trading.StatusResponse
	8,  // 25: trading.TradingService.GetPortfolio:output_type -> trading.Portfolio
	0,  // 26: trading.TradingService.SubscribeTicks:output_type -> trading.Tick
	0,  // 27: trading.TradingService.StreamPrice:output_type -> trading.Tick
	6,  // 28: trading.TradingService.AddSymbol:output_type -> trading.StatusResponse
	6,  // 29: trading.TradingService.RemoveSymbol:output_type -> trading.StatusResponse
	4,  // 30: trading.TradingService.ListSymbols:output_type -> trading.SymbolList
	18, // 31: trading.TradingService.GetMomentum:output_type -> trading.MomentumResponse
	12, // 32: trading.TradingService.ExecuteTrade:output_type -> trading.TradeResponse
	10, // 33: trading.RiskService.CalculateVaR:output_type -> trading.VaRResponse
	21, // 34: trading.AuthService.Register:output_type -> trading.AuthResponse
	21, // 35: trading.AuthService.Login:output_type -> trading.AuthResponse
	21, // [21:36] is the sub-list for method output_type
	6,  // [6:21] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_trading_api_proto_init() }
func file_trading_api_proto_init() {
	if File_trading_api_proto != nil {
		return
	}
	file_trading_api_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_trading_api_proto_rawDesc), len(file_trading_api_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_trading_api_proto_goTypes,
		DependencyIndexes: file_trading_api_proto_depIdxs,
		MessageInfos:      file_trading_api_proto_msgTypes,
	}.Build()
	File_trading_api_proto = out.File
	file_trading_api_proto_goTypes = nil
	file_trading_api_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: trading_api.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TradingService_StreamOrderBook_FullMethodName = "/trading.TradingService/StreamOrderBook"
	TradingService_GetPrice_FullMethodName        = "/trading.TradingService/GetPrice"
	TradingService_StartStrategy_FullMethodName   = "/trading.TradingService/StartStrategy"
	TradingService_StopStrategy_FullMethodName    = "/trading.TradingService/StopStrategy"
	TradingService_GetPortfolio_FullMethodName    = "/trading.TradingService/GetPortfolio"
	TradingService_SubscribeTicks_FullMethodName  = "/trading.TradingService/SubscribeTicks"
	TradingService_StreamPrice_FullMethodName     = "/trading.TradingService/StreamPrice"
	TradingService_AddSymbol_FullMethodName       = "/trading.TradingService/AddSymbol"
	TradingService_RemoveSymbol_FullMethodName    = "/trading.TradingService/RemoveSymbol"
	TradingService_ListSymbols_FullMethodName     = "/trading.TradingService/ListSymbols"
	TradingService_GetMomentum_FullMethodName     = "/trading.TradingService/GetMomentum"
	TradingService_CreateBot_FullMethodName       = "/trading.TradingService/CreateBot"
	TradingService_ListBots_FullMethodName        = "/trading.TradingService/ListBots"
	TradingService_StartBot_FullMethodName        = "/trading.TradingService/StartBot"
	TradingService_StopBot_FullMethodName         = "/trading.TradingService/StopBot"
	TradingService_GetBotStatus_FullMethodName    = "/trading.TradingService/GetBotStatus"
)

// TradingServiceClient is the client API for TradingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingServiceClient interface {
	StreamOrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderBook], error)
	GetPrice(ctx context.Context, in *Tick, opts ...grpc.CallOption) (*Tick, error)
	StartStrategy(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	StopStrategy(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetPortfolio(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*Portfolio, error)
	SubscribeTicks(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tick], error)
	StreamPrice(ctx context.Context, in *TickStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tick], error)
	AddSymbol(ctx context.Context, in *SymbolRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RemoveSymbol(ctx context.Context, in *SymbolRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ListSymbols(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SymbolList, error)
	GetMomentum(ctx context.Context, in *MomentumRequest, opts ...grpc.CallOption) (*MomentumResponse, error)
	CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ListBots(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BotList, error)
	StartBot(ctx context.Context, in *BotIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	StopBot(ctx context.Context, in *BotIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetBotStatus(ctx context.Context, in *BotIdRequest, opts ...grpc.CallOption) (*BotConfig, error)
}

type tradingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingServiceClient(cc grpc.ClientConnInterface) TradingServiceClient {
	return &tradingServiceClient{cc}
}

func (c *tradingServiceClient) StreamOrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderBook], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradingService_ServiceDesc.Streams[0], TradingService_StreamOrderBook_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OrderBookRequest, OrderBook]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingService_StreamOrderBookClient = grpc.ServerStreamingClient[OrderBook]

func (c *tradingServiceClient) GetPrice(ctx context.Context, in *Tick, opts ...grpc.CallOption) (*Tick, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tick)
	err := c.cc.Invoke(ctx, TradingService_GetPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) StartStrategy(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, TradingService_StartStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) StopStrategy(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, TradingService_StopStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetPortfolio(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*Portfolio, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Portfolio)
	err := c.cc.Invoke(ctx, TradingService_GetPortfolio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) SubscribeTicks(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tick], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradingService_ServiceDesc.Streams[1], TradingService_SubscribeTicks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StrategyRequest, Tick]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingService_SubscribeTicksClient = grpc.ServerStreamingClient[Tick]

func (c *tradingServiceClient) StreamPrice(ctx context.Context, in *TickStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tick], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradingService_ServiceDesc.Streams[2], TradingService_StreamPrice_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TickStreamRequest, Tick]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingService_StreamPriceClient = grpc.ServerStreamingClient[Tick]

func (c *tradingServiceClient) AddSymbol(ctx context.Context, in *SymbolRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, TradingService_AddSymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) RemoveSymbol(ctx context.Context, in *SymbolRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, TradingService_RemoveSymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) ListSymbols(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SymbolList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SymbolList)
	err := c.cc.Invoke(ctx, TradingService_ListSymbols_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetMomentum(ctx context.Context, in *MomentumRequest, opts ...grpc.CallOption) (*MomentumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MomentumResponse)
	err := c.cc.Invoke(ctx, TradingService_GetMomentum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, TradingService_CreateBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) ListBots(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BotList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BotList)
	err := c.cc.Invoke(ctx, TradingService_ListBots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) StartBot(ctx context.Context, in *BotIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, TradingService_StartBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) StopBot(ctx context.Context, in *BotIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, TradingService_StopBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetBotStatus(ctx context.Context, in *BotIdRequest, opts ...grpc.CallOption) (*BotConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BotConfig)
	err := c.cc.Invoke(ctx, TradingService_GetBotStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingServiceServer is the server API for TradingService service.
// All implementations must embed UnimplementedTradingServiceServer
// for forward compatibility.
type TradingServiceServer interface {
	StreamOrderBook(*OrderBookRequest, grpc.ServerStreamingServer[OrderBook]) error
	GetPrice(context.Context, *Tick) (*Tick, error)
	StartStrategy(context.Context, *StrategyRequest) (*StatusResponse, error)
	StopStrategy(context.Context, *StrategyRequest) (*StatusResponse, error)
	GetPortfolio(context.Context, *PortfolioRequest) (*Portfolio, error)
	SubscribeTicks(*StrategyRequest, grpc.ServerStreamingServer[Tick]) error
	StreamPrice(*TickStreamRequest, grpc.ServerStreamingServer[Tick]) error
	AddSymbol(context.Context, *SymbolRequest) (*StatusResponse, error)
	RemoveSymbol(context.Context, *SymbolRequest) (*StatusResponse, error)
	ListSymbols(context.Context, *Empty) (*SymbolList, error)
	GetMomentum(context.Context, *MomentumRequest) (*MomentumResponse, error)
	CreateBot(context.Context, *CreateBotRequest) (*StatusResponse, error)
	ListBots(context.Context, *Empty) (*BotList, error)
	StartBot(context.Context, *BotIdRequest) (*StatusResponse, error)
	StopBot(context.Context, *BotIdRequest) (*StatusResponse, error)
	GetBotStatus(context.Context, *BotIdRequest) (*BotConfig, error)
	mustEmbedUnimplementedTradingServiceServer()
}

// UnimplementedTradingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradingServiceServer struct{}

func (UnimplementedTradingServiceServer) StreamOrderBook(*OrderBookRequest, grpc.ServerStreamingServer[OrderBook]) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrderBook not implemented")
}
func (UnimplementedTradingServiceServer) GetPrice(context.Context, *Tick) (*Tick, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedTradingServiceServer) StartStrategy(context.Context, *StrategyRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStrategy not implemented")
}
func (UnimplementedTradingServiceServer) StopStrategy(context.Context, *StrategyRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStrategy not implemented")
}
func (UnimplementedTradingServiceServer) GetPortfolio(context.Context, *PortfolioRequest) (*Portfolio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolio not implemented")
}
func (UnimplementedTradingServiceServer) SubscribeTicks(*StrategyRequest, grpc.ServerStreamingServer[Tick]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTicks not implemented")
}
func (UnimplementedTradingServiceServer) StreamPrice(*TickStreamRequest, grpc.ServerStreamingServer[Tick]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPrice not implemented")
}
func (UnimplementedTradingServiceServer) AddSymbol(context.Context, *SymbolRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSymbol not implemented")
}
func (UnimplementedTradingServiceServer) RemoveSymbol(context.Context, *SymbolRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSymbol not implemented")
}
func (UnimplementedTradingServiceServer) ListSymbols(context.Context, *Empty) (*SymbolList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbols not implemented")
}
func (UnimplementedTradingServiceServer) GetMomentum(context.Context, *MomentumRequest) (*MomentumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMomentum not implemented")
}
func (UnimplementedTradingServiceServer) CreateBot(context.Context, *CreateBotRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBot not implemented")
}
func (UnimplementedTradingServiceServer) ListBots(context.Context, *Empty) (*BotList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBots not implemented")
}
func (UnimplementedTradingServiceServer) StartBot(context.Context, *BotIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBot not implemented")
}
func (UnimplementedTradingServiceServer) StopBot(context.Context, *BotIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBot not implemented")
}
func (UnimplementedTradingServiceServer) GetBotStatus(context.Context, *BotIdRequest) (*BotConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotStatus not implemented")
}
func (UnimplementedTradingServiceServer) mustEmbedUnimplementedTradingServiceServer() {}
func (UnimplementedTradingServiceServer) testEmbeddedByValue()                        {}

// UnsafeTradingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingServiceServer will
// result in compilation errors.
type UnsafeTradingServiceServer interface {
	mustEmbedUnimplementedTradingServiceServer()
}

func RegisterTradingServiceServer(s grpc.ServiceRegistrar, srv TradingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTradingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TradingService_ServiceDesc, srv)
}

func _TradingService_StreamOrderBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderBookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingServiceServer).StreamOrderBook(m, &grpc.GenericServerStream[OrderBookRequest, OrderBook]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingService_StreamOrderBookServer = grpc.ServerStreamingServer[OrderBook]

func _TradingService_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetPrice(ctx, req.(*Tick))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_StartStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).StartStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_StartStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).StartStrategy(ctx, req.(*StrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_StopStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).StopStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_StopStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).StopStrategy(ctx, req.(*StrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_GetPortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetPortfolio(ctx, req.(*PortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_SubscribeTicks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StrategyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingServiceServer).SubscribeTicks(m, &grpc.GenericServerStream[StrategyRequest, Tick]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingService_SubscribeTicksServer = grpc.ServerStreamingServer[Tick]

func _TradingService_StreamPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TickStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingServiceServer).StreamPrice(m, &grpc.GenericServerStream[TickStreamRequest, Tick]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingService_StreamPriceServer = grpc.ServerStreamingServer[Tick]

func _TradingService_AddSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).AddSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_AddSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).AddSymbol(ctx, req.(*SymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_RemoveSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).RemoveSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_RemoveSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).RemoveSymbol(ctx, req.(*SymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_ListSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).ListSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_ListSymbols_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).ListSymbols(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetMomentum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetMomentum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_GetMomentum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetMomentum(ctx, req.(*MomentumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_CreateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).CreateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_CreateBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).CreateBot(ctx, req.(*CreateBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_ListBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).ListBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_ListBots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).ListBots(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_StartBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).StartBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_StartBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).StartBot(ctx, req.(*BotIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_StopBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).StopBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_StopBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).StopBot(ctx, req.(*BotIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetBotStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetBotStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_GetBotStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetBotStatus(ctx, req.(*BotIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingService_ServiceDesc is the grpc.ServiceDesc for TradingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trading.TradingService",
	HandlerType: (*TradingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrice",
			Handler:    _TradingService_GetPrice_Handler,
		},
		{
			MethodName: "StartStrategy",
			Handler:    _TradingService_StartStrategy_Handler,
		},
		{
			MethodName: "StopStrategy",
			Handler:    _TradingService_StopStrategy_Handler,
		},
		{
			MethodName: "GetPortfolio",
			Handler:    _TradingService_GetPortfolio_Handler,
		},
		{
			MethodName: "AddSymbol",
			Handler:    _TradingService_AddSymbol_Handler,
		},
		{
			MethodName: "RemoveSymbol",
			Handler:    _TradingService_RemoveSymbol_Handler,
		},
		{
			MethodName: "ListSymbols",
			Handler:    _TradingService_ListSymbols_Handler,
		},
		{
			MethodName: "GetMomentum",
			Handler:    _TradingService_GetMomentum_Handler,
		},
		{
			MethodName: "CreateBot",
			Handler:    _TradingService_CreateBot_Handler,
		},
		{
			MethodName: "ListBots",
			Handler:    _TradingService_ListBots_Handler,
		},
		{
			MethodName: "StartBot",
			Handler:    _TradingService_StartBot_Handler,
		},
		{
			MethodName: "StopBot",
			Handler:    _TradingService_StopBot_Handler,
		},
		{
			MethodName: "GetBotStatus",
			Handler:    _TradingService_GetBotStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOrderBook",
			Handler:       _TradingService_StreamOrderBook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTicks",
			Handler:       _TradingService_SubscribeTicks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPrice",
			Handler:       _TradingService_StreamPrice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "trading_api.proto",
}

const (
	RiskService_CalculateVaR_FullMethodName = "/trading.RiskService/CalculateVaR"
)

// RiskServiceClient is the client API for RiskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiskServiceClient interface {
	CalculateVaR(ctx context.Context, in *VaRRequest, opts ...grpc.CallOption) (*VaRResponse, error)
}

type riskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiskServiceClient(cc grpc.ClientConnInterface) RiskServiceClient {
	return &riskServiceClient{cc}
}

func (c *riskServiceClient) CalculateVaR(ctx context.Context, in *VaRRequest, opts ...grpc.CallOption) (*VaRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VaRResponse)
	err := c.cc.Invoke(ctx, RiskService_CalculateVaR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskServiceServer is the server API for RiskService service.
// All implementations must embed UnimplementedRiskServiceServer
// for forward compatibility.
type RiskServiceServer interface {
	CalculateVaR(context.Context, *VaRRequest) (*VaRResponse, error)
	mustEmbedUnimplementedRiskServiceServer()
}

// UnimplementedRiskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRiskServiceServer struct{}

func (UnimplementedRiskServiceServer) CalculateVaR(context.Context, *VaRRequest) (*VaRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateVaR not implemented")
}
func (UnimplementedRiskServiceServer) mustEmbedUnimplementedRiskServiceServer() {}
func (UnimplementedRiskServiceServer) testEmbeddedByValue()                     {}

// UnsafeRiskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiskServiceServer will
// result in compilation errors.
type UnsafeRiskServiceServer interface {
	mustEmbedUnimplementedRiskServiceServer()
}

func RegisterRiskServiceServer(s grpc.ServiceRegistrar, srv RiskServiceServer) {
	// If the following call pancis, it indicates UnimplementedRiskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RiskService_ServiceDesc, srv)
}

func _RiskService_CalculateVaR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).CalculateVaR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_CalculateVaR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).CalculateVaR(ctx, req.(*VaRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiskService_ServiceDesc is the grpc.ServiceDesc for RiskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trading.RiskService",
	HandlerType: (*RiskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateVaR",
			Handler:    _RiskService_CalculateVaR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trading_api.proto",
}

const (
	AuthService_Register_FullMethodName = "/trading.AuthService/Register"
	AuthService_Login_FullMethodName    = "/trading.AuthService/Login"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	Register(context.Context, *RegisterRequest) (*AuthResponse, error)
	Login(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) Register(context.Context, *RegisterRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) Login(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trading.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trading_api.proto",
}

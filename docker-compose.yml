services:
  risk:
    build:
      context: .
      dockerfile: Dockerfile.risk
    restart: unless-stopped
    environment:
      - RUST_LOG=info
    expose:
      - "50052"
  trading:
    build:
      context: .
      dockerfile: Dockerfile.trading
    environment:
      - AUTH_SECRET=${AUTH_SECRET}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,https://app.aetherion.cloud, https://api.aetherion.cloud, https://www.aetherion.cloud}
      - AUTH_PREVIOUS_SECRET=${AUTH_PREVIOUS_SECRET:-}
      - POSTGRES_DSN=postgres://user:password@postgres:5432/aetherion?sslmode=disable
      - REACT_APP_STRIPE_PRICE_ID_MONTHLY=${REACT_APP_STRIPE_PRICE_ID_MONTHLY}
      - REACT_APP_STRIPE_PRICE_ID_YEARLY=${REACT_APP_STRIPE_PRICE_ID_YEARLY}
    depends_on:
      - risk
      - postgres
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8090/healthz"]
      interval: 15s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    expose:
      - "50051"
      - "8081"
    ports:
      - "8081:8081"

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: aetherion
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./go/db/migrations:/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d aetherion"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
  backend:
    build:
      context: ./python
      dockerfile: Dockerfile
    environment:
      - AUTH_SECRET=${AUTH_SECRET}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    expose:
      - "8000"
    ports:
      - "8000:8000"
    restart: unless-stopped
    volumes:
      - ./data/BTCUSD_1min.csv:/app/data/BTCUSD_1min.csv
  envoy:
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./envoy.yaml:/etc/envoy/envoy.yaml:ro
      - ./certs:/etc/envoy/certs:ro
    build:
      context: .
      dockerfile: Dockerfile.envoy
    depends_on:
      - trading
      - backend
    ports:
      - "443:443"
      - "80:80"
      - "8080:8080"
    restart: unless-stopped
    environment:
      - ENVOY_UID=1337
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        REACT_APP_GRPC_HOST: https://api.aetherion.cloud
        # REACT_APP_GRPC_HOST: http://localhost:8080
        REACT_APP_STRIPE_PRICE_ID_MONTHLY: ${REACT_APP_STRIPE_PRICE_ID_MONTHLY}
        REACT_APP_STRIPE_PRICE_ID_YEARLY: ${REACT_APP_STRIPE_PRICE_ID_YEARLY}
        REACT_APP_STRIPE_PUBLISHABLE_KEY: ${REACT_APP_STRIPE_PUBLISHABLE_KEY}
    ports:
      - "3000:80"
    depends_on:
      - envoy
      - trading
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
  orchestrator:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile.orchestrator
    depends_on:
      - trading
      - risk
    environment:
      - GO_SERVICE_ADDR=trading:50051
      - RUST_SERVICE_ADDR=risk:50052
      # This is the initial account value for new bots
      - INITIAL_ACCOUNT_VALUE=1000011.0
    restart: unless-stopped
    volumes:
      - ./data/BTCUSD_1min.csv:/app/data/BTCUSD_1min.csv:ro
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  acme-challenge:
    image: python:3
    command: python3 -m http.server 8080 --directory /acme-challenge
    volumes:
      - ./acme-challenge:/acme-challenge
    restart: unless-stopped
volumes:
  postgres_data:
networks:
  default:
    name: aetherion-net
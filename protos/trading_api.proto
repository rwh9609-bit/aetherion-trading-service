syntax = "proto3";

package trading;

option go_package = "aetherion-trading-service/gen/protos";

// Represents a single market data tick
message Tick {
    string symbol = 1;
    double price = 2;
    int64 timestamp_ns = 3; // Nanosecond precision timestamp
}

// Request to start or stop a strategy
message StrategyRequest {
    string strategy_id = 1;
    string symbol = 2;
    map<string, string> parameters = 3; // e.g., {"order_size": "10", "threshold": "0.5"}
}

// Generic response for operations
message StatusResponse {
    bool success = 1;
    string message = 2;
}

// Request to get portfolio status
message PortfolioRequest {
    string account_id = 1;
}

// Response with portfolio details
// Portfolio snapshot at a point in time
message Portfolio {
    map<string, double> positions = 1;  // Map of symbol to quantity
    double total_value_usd = 2;
    optional double last_price_change = 3;  // Last observed price change percentage
}


// Request to calculate Value at Risk (VaR)
message VaRRequest {
    Portfolio current_portfolio = 1;
    string risk_model = 2; // e.g., "monte_carlo"
}

// Response with the calculated VaR
message VaRResponse {
    double value_at_risk = 1;
}

// OrderBook related messages
message OrderBookEntry {
    double price = 1;
    double size = 2;
}

message OrderBook {
    repeated OrderBookEntry bids = 1;
    repeated OrderBookEntry asks = 2;
    string symbol = 3;
}

message OrderBookRequest {
    string symbol = 1;
}

// --- Authentication & User Management ---
// Request to register a new user
message RegisterRequest {
    string username = 1;
    string password = 2; // Plaintext over TLS; will be hashed server-side
}

// Request to login
message AuthRequest {
    string username = 1;
    string password = 2;
}

// Response containing JWT token
message AuthResponse {
    bool success = 1;
    string message = 2;
    string token = 3;           // JWT bearer token
    int64 expires_at_unix = 4;   // Expiration timestamp (seconds since epoch)
}

// Service definition
service TradingService {
    // Stream order book updates
    rpc StreamOrderBook(OrderBookRequest) returns (stream OrderBook) {}
    
    // Get current price for a symbol
    rpc GetPrice(Tick) returns (Tick) {}
    
    // Start a trading strategy
    rpc StartStrategy(StrategyRequest) returns (StatusResponse) {}
    
    // Stop a trading strategy
    rpc StopStrategy(StrategyRequest) returns (StatusResponse) {}
    
    // Gets the current portfolio status
    rpc GetPortfolio(PortfolioRequest) returns (Portfolio) {}
    
    // Subscribes to a real-time feed of market data
    rpc SubscribeTicks(StrategyRequest) returns (stream Tick) {}
}

// Service for performing risk calculations
service RiskService {
    // Calculates the Value at Risk for a given portfolio
    rpc CalculateVaR(VaRRequest) returns (VaRResponse) {}
}

// Service for authentication
service AuthService {
    rpc Register(RegisterRequest) returns (AuthResponse) {}
    rpc Login(AuthRequest) returns (AuthResponse) {}
}
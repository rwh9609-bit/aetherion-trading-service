syntax = "proto3";

package aetherion;

import "google/protobuf/timestamp.proto";

option go_package = "package/gen";

// =================================================================
// COMMON & UTILITY MESSAGES
// =================================================================

// High-precision financial values (avoids float rounding issues)
message DecimalValue {
    int64 units = 1;   // Whole part
    sfixed32 nanos = 2; // Fractional part, -999,999,999 .. +999,999,999
}

// Generic operation response
message StatusResponse {
    bool success = 1;
    string message = 2;
    string id = 3; // e.g., bot_id, order_id
}

message Empty {}

message Pagination {
    int32 limit = 1;
    int32 offset = 2;
}

// =================================================================
// ENUMS
// =================================================================

enum OrderSide {
    ORDER_SIDE_UNSPECIFIED = 0;
    BUY = 1;
    SELL = 2;
}

enum OrderType {
    ORDER_TYPE_UNSPECIFIED = 0;
    MARKET = 1;
    LIMIT = 2;
    STOP = 3;
}

enum OrderStatus {
    ORDER_STATUS_UNSPECIFIED = 0;
    NEW = 1;
    SUBMITTED = 2;
    PARTIALLY_FILLED = 3;
    FILLED = 4;
    CANCELED = 5;
    REJECTED = 6;
}

// =================================================================
// AUTH & USER SERVICE
// =================================================================

service AuthService {
    rpc Register(RegisterRequest) returns (AuthResponse) {}
    rpc Login(AuthRequest) returns (AuthResponse) {}
    rpc GetUser(GetUserRequest) returns (UserInfo) {}
    rpc RefreshToken(RefreshTokenRequest) returns (AuthResponse) {}
}

message RegisterRequest {
    string username = 1;
    string password = 2;
    string email = 3;
}

message AuthRequest {
    string username = 1;
    string password = 2;
}

message RefreshTokenRequest {
    string refresh_token = 1;
}

message AuthResponse {
    bool success = 1;
    string message = 2;
    string token = 3;
    string refresh_token = 4;
    google.protobuf.Timestamp expires_at = 5;
}

message GetUserRequest {
  string user_id = 1;
}

message UserInfo {
  string id = 1;
  string username = 2;
  string email = 3;
  google.protobuf.Timestamp created_at = 4;
}

// =================================================================
// BOT MANAGEMENT SERVICE
// =================================================================

service BotService {
  rpc CreateBot(CreateBotRequest) returns (StatusResponse) {}
  rpc GetBot(BotIdRequest) returns (Bot) {}
  rpc ListBots(ListBotsRequest) returns (BotList) {}
  rpc UpdateBot(UpdateBotRequest) returns (Bot) {}
  rpc DeleteBot(BotIdRequest) returns (StatusResponse) {}
  rpc StartBot(BotIdRequest) returns (StatusResponse) {}
  rpc StopBot(BotIdRequest) returns (StatusResponse) {}
  rpc StreamBotStatus(BotIdRequest) returns (stream Bot) {} // realtime updates
}

message Bot {
    string id = 1;
    string user_id = 2;
    string name = 3;
    string description = 4;
    repeated string symbols = 5;
    string strategy_name = 6;
    map<string, string> strategy_parameters = 7; // safer than JSON string
    DecimalValue initial_account_value = 8;
    DecimalValue current_account_value = 9;
    bool is_active = 10;
    bool is_live = 11;
    google.protobuf.Timestamp created_at = 12;
    google.protobuf.Timestamp updated_at = 13;
}

message CreateBotRequest {
    string user_id = 1;
    string name = 2;
    string description = 3;
    repeated string symbols = 4;
    string strategy_name = 5;
    map<string, string> strategy_parameters = 6;
    DecimalValue initial_account_value = 7;
    bool is_live = 8;
}

message UpdateBotRequest {
    string bot_id = 1;
    optional string name = 2;
    optional string description = 3;
    optional bool is_active = 4;
}

message BotIdRequest {
    string bot_id = 1;
}

message ListBotsRequest {
    string user_id = 1;
}

message BotList {
    repeated Bot bots = 1;
}

// =================================================================
// ORDER & TRADE SERVICE
// =================================================================

service OrderService {
    rpc CreateOrder(CreateOrderRequest) returns (Order) {}
    rpc CancelOrder(CancelOrderRequest) returns (Order) {}
    rpc GetOrder(GetOrderRequest) returns (Order) {}
    rpc GetTradeHistory(TradeHistoryRequest) returns (TradeHistoryResponse) {}
}

message Order {
    string id = 1;
    string bot_id = 2;
    string symbol = 3;
    OrderSide side = 4;
    OrderType type = 5;
    OrderStatus status = 6;
    DecimalValue quantity_requested = 7;
    DecimalValue quantity_filled = 8;
    optional DecimalValue limit_price = 9;
    optional DecimalValue stop_price = 10;
    google.protobuf.Timestamp created_at = 11;
    google.protobuf.Timestamp updated_at = 12;
    repeated Trade trades = 13;
}

message CreateOrderRequest {
    string bot_id = 1;
    string symbol = 2;
    OrderSide side = 3;
    OrderType type = 4;
    DecimalValue quantity = 5;
    optional DecimalValue limit_price = 6;
    optional DecimalValue stop_price = 7;
}

message CancelOrderRequest {
    string order_id = 1;
    string bot_id = 2;
}

message GetOrderRequest {
    string order_id = 1;
}

message Trade {
    string id = 1;
    string order_id = 2;
    string bot_id = 3;
    string symbol = 4;
    OrderSide side = 5;
    DecimalValue quantity = 6;
    DecimalValue price = 7;
    optional DecimalValue commission = 8;
    google.protobuf.Timestamp executed_at = 9;
    optional DecimalValue pnl_realized = 10;
}

message TradeHistoryRequest {
    string bot_id = 1;
    optional google.protobuf.Timestamp start_time = 2;
    optional google.protobuf.Timestamp end_time = 3;
    Pagination pagination = 4;
}

message TradeHistoryResponse {
    repeated Trade trades = 1;
    int32 total_count = 2;
}

// =================================================================
// PORTFOLIO & PERFORMANCE SERVICE
// =================================================================

service PortfolioService {
    rpc GetPortfolio(PortfolioRequest) returns (PortfolioResponse) {}
    rpc StreamPortfolio(PortfolioRequest) returns (stream PortfolioResponse) {}
    rpc GetPerformanceHistory(PerformanceHistoryRequest) returns (PerformanceHistoryResponse) {}
}

message PortfolioRequest {
    string bot_id = 1;
}

message PortfolioPosition {
    string symbol = 1;
    DecimalValue quantity = 2;
    DecimalValue average_price = 3;
    DecimalValue market_value = 4;
    DecimalValue unrealized_pnl = 5;
    DecimalValue exposure_pct = 6;
}

message PortfolioResponse {
    string bot_id = 1;
    repeated PortfolioPosition positions = 2;
    DecimalValue total_portfolio_value = 3;
    DecimalValue cash_balance = 4;
    google.protobuf.Timestamp updated_at = 5;
}

message PerformanceHistoryRequest {
    string bot_id = 1;
    google.protobuf.Timestamp start_time = 2;
    google.protobuf.Timestamp end_time = 3;
}

message BotPerformanceSnapshot {
    google.protobuf.Timestamp snapshot_time = 1;
    DecimalValue equity_value = 2;
    DecimalValue cash_balance = 3;
    DecimalValue pnl = 4;
}

message PerformanceHistoryResponse {
    repeated BotPerformanceSnapshot snapshots = 1;
}

// =================================================================
// RISK SERVICE
// =================================================================

service RiskService {
    rpc CalculateVaR(VaRRequest) returns (VaRResponse) {}
}

message VaRRequest {
    PortfolioResponse current_portfolio = 1;
    string risk_model = 2; // e.g. "historical", "monte_carlo"
    double confidence_level = 3; // e.g. 0.95
    double horizon_days = 4;
}

message VaRResponse {
    DecimalValue value_at_risk = 1;
    repeated string asset_names = 2;
    repeated double correlation_matrix = 3;
    repeated double volatility_per_asset = 4;
    string simulation_mode = 5;
    google.protobuf.Timestamp last_update = 6;
}
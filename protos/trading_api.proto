syntax = "proto3";

package trading;

import "google/protobuf/timestamp.proto";

option go_package = "aetherion/gen";

// =================================================================
// COMMON & UTILITY MESSAGES
// =================================================================

message Empty {}

// High-precision financial values (avoids float rounding issues)
message DecimalValue {
    int64 units = 1;   // Whole part
    sfixed32 nanos = 2; // Fractional part, -999,999,999 .. +999,999,999
}

message StatusResponse {
    bool success = 1;
    string message = 2;
    string id = 3; // optional identifier (e.g., strategy/bot id)
}

message Pagination {
    int32 limit = 1;
    int32 offset = 2;
}

// =================================================================
// ENUMS
// =================================================================

enum OrderSide {
    ORDER_SIDE_UNSPECIFIED = 0;
    BUY = 1;
    SELL = 2;
}

enum OrderType {
    ORDER_TYPE_UNSPECIFIED = 0;
    MARKET = 1;
    LIMIT = 2;
    STOP = 3;
}

enum OrderStatus {
    ORDER_STATUS_UNSPECIFIED = 0;
    NEW = 1;
    SUBMITTED = 2;
    PARTIALLY_FILLED = 3;
    FILLED = 4;
    CANCELED = 5;
    REJECTED = 6;
}

// =================================================================
// PORTFOLIO & PERFORMANCE SERVICE
// =================================================================

service PortfolioService {
    rpc GetPortfolio(PortfolioRequest) returns (PortfolioResponse) {}
    rpc StreamPortfolio(PortfolioRequest) returns (stream PortfolioResponse) {}
    rpc GetPerformanceHistory(PerformanceHistoryRequest) returns (PerformanceHistoryResponse) {}
}

message PortfolioRequest {
    string bot_id = 1;
}

message PortfolioPosition {
    string symbol = 1;
    DecimalValue quantity = 2;
    DecimalValue average_price = 3;
    DecimalValue market_value = 4;
    DecimalValue unrealized_pnl = 5;
    DecimalValue exposure_pct = 6;
}

message PortfolioResponse {
    string bot_id = 1;
    repeated PortfolioPosition positions = 2;
    DecimalValue total_portfolio_value = 3;
    DecimalValue cash_balance = 4;
    google.protobuf.Timestamp updated_at = 5;
}

message PerformanceHistoryRequest {
    string bot_id = 1;
    google.protobuf.Timestamp start_time = 2;
    google.protobuf.Timestamp end_time = 3;
}

message BotPerformanceSnapshot {
    google.protobuf.Timestamp snapshot_time = 1;
    DecimalValue equity_value = 2;
    DecimalValue cash_balance = 3;
    DecimalValue pnl = 4;
}

message PerformanceHistoryResponse {
    repeated BotPerformanceSnapshot snapshots = 1;
}

// =================================================================
// ORDER & TRADE SERVICE
// =================================================================

service OrderService {
    rpc CreateOrder(CreateOrderRequest) returns (Order) {}
    rpc CancelOrder(CancelOrderRequest) returns (Order) {}
    rpc GetOrder(GetOrderRequest) returns (Order) {}
    rpc GetTradeHistory(TradeHistoryRequest) returns (TradeHistoryResponse) {}
    rpc ListOrders(ListOrdersRequest) returns (ListOrdersResponse) {}
}

message ListOrdersRequest {
  string bot_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message ListOrdersResponse {
  repeated Order orders = 1;
  int32 total_count = 2;
}

message Order {
    string id = 1;
    string bot_id = 2;
    string symbol = 3;
    OrderSide side = 4;
    OrderType type = 5;
    OrderStatus status = 6;
    DecimalValue quantity_requested = 7;
    DecimalValue quantity_filled = 8;
    optional DecimalValue limit_price = 9;
    optional DecimalValue stop_price = 10;
    google.protobuf.Timestamp created_at = 11;
    google.protobuf.Timestamp updated_at = 12;
    repeated Trade trades = 13;
}

message CreateOrderRequest {
    string bot_id = 1;
    string symbol = 2;
    OrderSide side = 3;
    OrderType type = 4;
    DecimalValue quantity = 5;
    optional DecimalValue limit_price = 6;
    optional DecimalValue stop_price = 7;
}

message CancelOrderRequest {
    string order_id = 1;
    string bot_id = 2;
}

message GetOrderRequest {
    string order_id = 1;
}


message OrderBook {
    repeated OrderBookEntry bids = 1;
    repeated OrderBookEntry asks = 2;
    string symbol = 3;
}

message OrderBookEntry {
    double price = 1;
    double size = 2;
    int64 timestamp = 3; // Unix epoch milliseconds
}

message OrderBookRequest {
    string symbol = 1;
}

message Trade {
    string trade_id = 1;
    string symbol = 2;
    string side = 3;
    double quantity = 4;
    double price = 5;
    int64 executed_at = 6;
    string strategy_id = 7;
    string bot_id = 8;
    optional DecimalValue commission = 9;
    google.protobuf.Timestamp executed_at_timestamp = 10;
    optional DecimalValue pnl_realized = 11;
    optional DecimalValue pnl_unrealized = 12;
}

message TradeRequest {
    string symbol = 1;
    string side = 2;
    double size = 3;
    double price = 4;
    string strategy_id = 5;
    string user_id = 6;
    string bot_id = 7;
}

message TradeResponse {
    bool accepted = 1;
    string message = 2;
    double executed_price = 3;
    double pnl = 4; // realized PnL for closing trades (simplified)
}

message TradeHistoryRequest {
    string user_id = 1;
    string bot_id = 2;
}

message TradeHistoryResponse {
    repeated Trade trades = 1;
    int32 total_count = 2;
}

// =================================================================
// AUTH & USER SERVICE
// =================================================================
 
service AuthService {
    rpc Register(RegisterRequest) returns (AuthResponse) {}
    rpc Login(AuthRequest) returns (AuthResponse) {}
    rpc GetUser(GetUserRequest) returns (UserInfo);
    rpc RefreshToken(RefreshTokenRequest) returns (AuthResponse) {}
}

message AuthRequest {
    string username = 1;
    string password = 2;
}

message AuthResponse {
    bool success = 1;
    string message = 2;
    string token = 3;           // JWT bearer token
    int64 expires_at_unix = 4;   // Expiration timestamp (seconds since epoch)
    string refresh_token = 5;
    string role = 6;
}

message GetUserRequest {
  string username = 1;
}

message RegisterRequest {
    string username = 1;
    string password = 2; // Plaintext over TLS; will be hashed server-side
    string email = 3;
}

message UserInfo {
  string username = 1;
  string email = 2;
  int64 created_at_unix = 3;
}

message RefreshTokenRequest {
    string refresh_token = 1;
}

// =================================================================
// BOT MANAGEMENT SERVICE
// =================================================================

// BotService provides a focused interface for bot lifecycle operations.
service BotService {
  rpc CreateBot(CreateBotRequest) returns (StatusResponse) {}
  rpc GetBot(BotIdRequest) returns (Bot) {}
  rpc UpdateBot(UpdateBotRequest) returns (Bot) {}
  rpc DeleteBot(BotIdRequest) returns (StatusResponse) {}
  rpc ListBots(Empty) returns (BotList) {}
  rpc StartBot(BotIdRequest) returns (StatusResponse) {}
  rpc StopBot(BotIdRequest) returns (StatusResponse) {}
  rpc GetBotStatus(BotIdRequest) returns (Bot) {}
  rpc StreamBotStatus(BotIdRequest) returns (stream Bot) {} // realtime updates
}

message Bot {
    string bot_id = 1;
    string symbol = 2;
    string strategy = 3;
    map<string, string> parameters = 4;
    bool is_active = 5;
    int64 created_at_unix_ms = 6;
    string name = 7;
    string user_id = 8;
    double account_value = 9;
    string description = 10;
    DecimalValue initial_account_value = 11;
    DecimalValue current_account_value = 12;
    bool is_live = 13;
    google.protobuf.Timestamp created_at = 14;
    google.protobuf.Timestamp updated_at = 15;
}
 
message UpdateBotRequest {
    string bot_id = 1;
    optional string name = 2;
    optional string description = 3;
    optional bool is_active = 4;
}
message CreateBotRequest {
    string symbol = 1;
    string strategy = 2;
    map<string, string> parameters = 3;
    string name = 4;
    double account_value = 5;
}
 
message BotIdRequest {
    string bot_id = 1;
}

message ListBotsRequest {
    string user_id = 1;
}
 
message BotList {
    repeated Bot bots = 1;
}

// =================================================================
// RISK SERVICE
// =================================================================

// Service for performing risk calculations
service RiskService {
    // Calculates the Value at Risk for a given portfolio
    rpc CalculateVaR(VaRRequest) returns (VaRResponse) {}
}

message VaRRequest {
    PortfolioResponse current_portfolio = 1;
    string risk_model = 2; // e.g. "historical", "monte_carlo"
    double confidence_level = 3; // e.g. 0.95
    double horizon_days = 4;
}

message VaRResponse {
    DecimalValue value_at_risk = 1;
    repeated string asset_names = 2;
    repeated double correlation_matrix = 3;
    repeated double volatility_per_asset = 4;
    string simulation_mode = 5;
    google.protobuf.Timestamp last_update = 6;
}

// ==================================================================
// Misc.
// ==================================================================

// Service definition
service TradingService {
    rpc StreamOrderBook(OrderBookRequest) returns (stream OrderBook) {}
    rpc GetPrice(Tick) returns (Tick) {}
    rpc StartStrategy(StrategyRequest) returns (StatusResponse) {}
    rpc StopStrategy(StrategyRequest) returns (StatusResponse) {}
    rpc SubscribeTicks(StrategyRequest) returns (stream Tick) {}
    rpc StreamPrice(TickStreamRequest) returns (stream Tick) {}
    rpc AddSymbol(SymbolRequest) returns (StatusResponse) {}
    rpc RemoveSymbol(SymbolRequest) returns (StatusResponse) {}
    rpc ListSymbols(Empty) returns (SymbolList) {}
    rpc GetMomentum(MomentumRequest) returns (MomentumResponse) {}
}

message MomentumRequest {
    repeated string symbols = 1; // optional filter list
}

message MomentumMetric {
    string symbol = 1;
    double last_price = 2;
    double pct_change_1m = 3; // percentage change over ~1 minute
    double pct_change_5m = 4; // percentage change over ~5 minutes
    double volatility = 5;    // standard deviation of log returns (annualized approximation)
    double momentum_score = 6; // composite score (weighted changes - volatility penalty)
}

message MomentumResponse {
    repeated MomentumMetric metrics = 1;
    int64 generated_at_unix_ms = 2;
}

message Tick {
    string symbol = 1;
    double price = 2;
    int64 timestamp_ns = 3; // Nanosecond precision timestamp
}

message TickStreamRequest {
    string symbol = 1;
}

message SymbolRequest {
    string symbol = 1;
}

message SymbolList {
    repeated string symbols = 1;
}

message StrategyRequest {
    string strategy_id = 1;
    string symbol = 2;
    map<string, string> parameters = 3;
    string user_id = 4;
}

// =================================================================
// SUBSCRIPTION SERVICE
// =================================================================

service SubscriptionService {
    rpc GetProducts(Empty) returns (GetProductsResponse) {}
    rpc CreateCheckoutSession(CreateCheckoutSessionRequest) returns (CreateCheckoutSessionResponse) {}
    rpc GetUserSubscription(Empty) returns (Subscription) {}
    rpc CancelUserSubscription(Empty) returns (StatusResponse) {}
}

message Product {
    string id = 1;
    string name = 2;
    string description = 3;
    string stripe_product_id = 4;
    double price_monthly = 5;
    string stripe_price_id_monthly = 6;
    double price_yearly = 7;
    string stripe_price_id_yearly = 8;
    repeated string features = 9;
}

message Subscription {
    string id = 1;
    string product_id = 2;
    string status = 3;
    int64 current_period_end = 4;
}

message GetProductsResponse {
    repeated Product products = 1;
}

message CreateCheckoutSessionRequest {
    string price_id = 1;
}

message CreateCheckoutSessionResponse {
    string session_id = 1;
}

syntax = "proto3";
package trading;
option go_package = "github.com/rwh9609-bit/multilanguage/go/gen";

import "trading_api.proto";

// Represents the configuration and status of a trading bot.
message BotConfig {
    string bot_id = 1;
    string symbol = 2;
    string strategy = 3;
    map<string, string> parameters = 4;
    bool is_active = 5;
    int64 created_at_unix_ms = 6;
    string name = 7;
}

// Request to create a new trading bot.
message CreateBotRequest {
    string symbol = 1;
    string strategy = 2;
    map<string, string> parameters = 3;
    string name = 4;
}

// Request based on a bot's unique ID.
message BotIdRequest {
    string bot_id = 1;
}

// Response containing a list of all configured bots.
message BotList {
    repeated BotConfig bots = 1;
}


// BotService provides a focused interface for bot lifecycle operations.
service BotService {
  rpc CreateBot(CreateBotRequest) returns (StatusResponse) {}
  rpc ListBots(Empty) returns (BotList) {}
  rpc StartBot(BotIdRequest) returns (StatusResponse) {}
  rpc StopBot(BotIdRequest) returns (StatusResponse) {}
  rpc GetBotStatus(BotIdRequest) returns (BotConfig) {}
}
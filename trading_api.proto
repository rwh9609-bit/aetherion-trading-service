syntax = "proto3";

package trading;

// Go package path must be fully qualified (module path + subdir) for protoc-gen-go.
option go_package = "github.com/rwh9609-bit/multilanguage/go/gen";

message Tick { string symbol = 1; double price = 2; int64 timestamp_ns = 3; }
message TickStreamRequest { string symbol = 1; }
message SymbolRequest { string symbol = 1; }
message Empty {}
message SymbolList { repeated string symbols = 1; }
message StrategyRequest { string strategy_id = 1; string symbol = 2; map<string,string> parameters = 3; }
message StatusResponse { bool success = 1; string message = 2; string id = 3; }
message PortfolioRequest { string account_id = 1; }
message Portfolio { map<string,double> positions = 1; double total_value_usd = 2; optional double last_price_change = 3; }
message VaRRequest { Portfolio current_portfolio = 1; string risk_model = 2; }
message VaRResponse { double value_at_risk = 1; }
message OrderBookEntry { double price = 1; double size = 2; }
message OrderBook { repeated OrderBookEntry bids = 1; repeated OrderBookEntry asks = 2; string symbol = 3; }
message OrderBookRequest { string symbol = 1; }
message MomentumRequest { repeated string symbols = 1; }
message MomentumMetric { string symbol = 1; double last_price = 2; double pct_change_1m = 3; double pct_change_5m = 4; double volatility = 5; double momentum_score = 6; }
message MomentumResponse { repeated MomentumMetric metrics = 1; int64 generated_at_unix_ms = 2; }
message BotConfig { string id = 1; string name = 2; string symbol = 3; string strategy = 4; map<string,string> parameters = 5; bool active = 6; int64 created_at_unix = 7; }
message CreateBotRequest { string name = 1; string symbol = 2; string strategy = 3; map<string,string> parameters = 4; }
message BotIdRequest { string id = 1; }
message BotList { repeated BotConfig bots = 1; }
message RegisterRequest { string username = 1; string password = 2; }
message AuthRequest { string username = 1; string password = 2; }
message AuthResponse { bool success = 1; string message = 2; string token = 3; int64 expires_at_unix = 4; }

// Trade execution messages
message TradeRequest { string symbol = 1; string side = 2; double size = 3; double price = 4; }
message TradeResponse { bool accepted = 1; string message = 2; double executed_price = 3; double pnl = 4; }

service TradingService {
	rpc StreamOrderBook(OrderBookRequest) returns (stream OrderBook) {}
	rpc GetPrice(Tick) returns (Tick) {}
	rpc StartStrategy(StrategyRequest) returns (StatusResponse) {}
	rpc StopStrategy(StrategyRequest) returns (StatusResponse) {}
	rpc GetPortfolio(PortfolioRequest) returns (Portfolio) {}
	rpc SubscribeTicks(StrategyRequest) returns (stream Tick) {}
	rpc StreamPrice(TickStreamRequest) returns (stream Tick) {}
	rpc AddSymbol(SymbolRequest) returns (StatusResponse) {}
	rpc RemoveSymbol(SymbolRequest) returns (StatusResponse) {}
	rpc ListSymbols(Empty) returns (SymbolList) {}
	rpc GetMomentum(MomentumRequest) returns (MomentumResponse) {}
	rpc CreateBot(CreateBotRequest) returns (StatusResponse) {}
	rpc ListBots(Empty) returns (BotList) {}
	rpc StartBot(BotIdRequest) returns (StatusResponse) {}
	rpc StopBot(BotIdRequest) returns (StatusResponse) {}
	rpc GetBotStatus(BotIdRequest) returns (BotConfig) {}
	rpc ExecuteTrade(TradeRequest) returns (TradeResponse) {}
}

service RiskService { rpc CalculateVaR(VaRRequest) returns (VaRResponse) {} }
service AuthService { rpc Register(RegisterRequest) returns (AuthResponse) {}; rpc Login(AuthRequest) returns (AuthResponse) {}; }
